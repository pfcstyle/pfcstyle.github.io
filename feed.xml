<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://pfcstyle.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://pfcstyle.github.io/" rel="alternate" type="text/html" /><updated>2021-02-06T17:29:40+08:00</updated><id>https://pfcstyle.github.io/feed.xml</id><title type="html">01手记</title><subtitle>Will的个人手记</subtitle><author><name>Yawei Wang</name></author><entry><title type="html"></title><link href="https://pfcstyle.github.io/2021/02/06/2016-03-20-Hello-Blog/" rel="alternate" type="text/html" title="" /><published>2021-02-06T17:29:40+08:00</published><updated>2021-02-06T17:29:40+08:00</updated><id>https://pfcstyle.github.io/2021/02/06/2016-03-20-Hello-Blog</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/06/2016-03-20-Hello-Blog/">&lt;blockquote&gt;
  &lt;p&gt;It’s My First Blog! Go down&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是我第一次自己搭建博客，以前虽然在CSDN上写过，但跟这个比显然有些索然无味了。我使用的这个模板是基于&lt;a href=&quot;http://huangxuan.me&quot;&gt;@Hux&lt;/a&gt; 分享的模板进行修改替换的，非常感谢！&lt;/p&gt;

&lt;p&gt;第一篇博文写什么呢？最后还是决定把自己搭建的过程记录下来。虽然网上已经有很多类似的了，但我仍觉得有些细节需要总结的，不废话了，Begin!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-20/blog-create.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;从github开始&quot;&gt;从Github开始&lt;/h1&gt;

&lt;p&gt;GitHub Pages是免费的静态站点，三个特点：免费托管、自带主题、支持自制页面和Jekyll。本博客即是建立在Github上的，所以下面介绍的也是基于Github的。&lt;/p&gt;

&lt;h3 id=&quot;拥有一个github账号&quot;&gt;拥有一个Github账号&lt;/h3&gt;

&lt;p&gt;首先大家应该有一个Github账号，作为一个程序员，如果你还没有加入Github,那么你显然out了！当然这不是为了赶时髦，github现在已经是全球最大的开源社区了，所以，加入的必要性就不言而喻了。&lt;/p&gt;

&lt;p&gt;怎么注册账号呢？呃，这个不写了，推荐一篇博文：&lt;a href=&quot;http://blog.csdn.net/renfufei/article/details/37725057/&quot;&gt;创建GitHub技术博客全攻略&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;好吧，推荐了这篇博文之后感觉基本什么都不用写了。但是我还是有一些自己经验的补充（耍无赖:)）。&lt;/p&gt;

&lt;h3 id=&quot;创建个人博文仓库&quot;&gt;创建个人博文仓库&lt;/h3&gt;

&lt;p&gt;Github是这样规定的，以 username.github.io 命名的仓库才可以作为自己的个人（公司）主页，并且此时你的主页代码等等都是在master分支中的，浏览器访问地址是username.github.io (比如我的是：pfcstyle.github.io)。如果你想要为自己的某个项目写文章的话，那么你需要在项目中新建gh-pages分支，浏览器访问地址：username.github.io/yourRepName。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;自己DIY才有感情吧，也更有成就感噻！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;没错，正如你所理解的那样，上面推荐的那篇博文里介绍了如何github帮助你自动生成一个博文分支（包括个人的master和项目的gh-pages），但是，这些都是完全自己新建，自己写代码，自己写样式，自己……总之完全可以自定义咯。&lt;/p&gt;

&lt;h3 id=&quot;本地git配置&quot;&gt;本地Git配置&lt;/h3&gt;

&lt;p&gt;远程的配置好了，该配置本地的了。我这里只介绍windows平台上的，linux/unix步骤也是差不多的。windows上最简单的应该就是这个&lt;a href=&quot;https://desktop.github.com/&quot;&gt;github for windows&lt;/a&gt; 了，直接下载安装就好。但是这个显然不是我介绍的重点，看下面。&lt;/p&gt;

&lt;h4 id=&quot;1安装git&quot;&gt;1.安装Git&lt;/h4&gt;

&lt;p&gt;使用命令行的好处，大概就是装逼了。。。但是我觉得命令行更原生，更能看到一些本质。好了，不装了，来&lt;a href=&quot;https://git-for-windows.github.io/&quot;&gt;这里&lt;/a&gt; 下载吧。版本你自己选，这个也是有界面的，但是，真的是丑陋无比，反正我是从来没有用过，都是直接用命令行。&lt;/p&gt;

&lt;p&gt;安装好就是配置了，你可以添加环境变量，比如我的是D:\Program Files\Git\bin。其实我并没有配置环境变量，因为我觉得根本不需要，安装好之后根目录下有一个git-bash，哪里需要，哪里运行，尤其是自动添加了右键菜单，还有高亮显示，很是方便。&lt;/p&gt;

&lt;h4 id=&quot;2配置本地ssh到github&quot;&gt;2.配置本地ssh到github&lt;/h4&gt;

&lt;p&gt;首先你要生成自己本地的sshkey，打开git-bash&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//邮箱地址后面的是指定生成公钥的文件名，不过不指定，默认生成~/.ssh/id_rsa.pub
ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;邮箱地址&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/githug_blog_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;回车之后还会让你设置提交用户名、密码，可以直接跳过，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-20/ssh.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;生成之后，打开你的pub文件（我的是githug_blog_keys.pub，一般在C:\Users\用户名.ssh\目录下），全选复制里面的内容,来到github进行配置：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-20/github-setting.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-20/ssh-settting.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你已经使用github生成好了，那么来到你想存放的目录下，右键打开git-bash，clone下来就好了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-20/self-ssh.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git clone 上图中的ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你是完全自定义的……那我相信你一定会搞的&lt;/p&gt;

&lt;h1 id=&quot;jekyll的安装与配置&quot;&gt;Jekyll的安装与配置&lt;/h1&gt;

&lt;p&gt;Jekyll是一种简单的、适用于博客的、静态网站生成引擎。它使用一个模板目录作为网站布局的基础框架，支持Markdown、Textile等标记语言的解析，提供了模板、变量、插件等功能，最终生成一个完整的静态Web站点。说白了就是，只要安装Jekyll的规范和结构，不用写html，就可以生成网站。[ &lt;a href=&quot;http://jekyllbootstrap.com/lessons/jekyll-introduction.html&quot;&gt;jekyll介绍&lt;/a&gt; ] [ &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;jekyll on Github&lt;/a&gt; ][ &lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;jekyllbootstrap&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Jekyll使用Liquid模板语言，{{page.title}}表示文章标题，{{content}}表示文章内容。我们可以用两种Liquid标记语言：输出标记（output markup）和标签标记 (tag markup)。输出标记会输出文本（如果被引用的变量存在），而标签标记不会。输出标记是用双花括号分隔，而标签标记是用花括号-百分号对分隔[ &lt;a href=&quot;https://github.com/shopify/liquid/wiki/liquid-for-designers&quot;&gt;Liquid模板语言&lt;/a&gt; ][ &lt;a href=&quot;https://github.com/jekyll/jekyll/wiki/Template-Data&quot;&gt;Liquid模板变量参考&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;jekyll与github的关系：GitHub Pages一个由 GitHub 提供的用于托管项目主页或博客的服务，jekyll是后台所运行的引擎。&lt;/p&gt;

&lt;p&gt;jekyll安装之前需要先安装DevKit,DevKit是windows平台下编译和使用本地C/C++扩展包的工具。它就是用来模拟Linux平台下的make,gcc,sh来进行编译。但是这个方法目前仅支持通过RubyInstaller安装的Ruby,先下载&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;RubyInstaller&lt;/a&gt; ,直接安装就好了，设置环境变量，path中配置C:\Ruby193\bin目录，然后在命令行终端下输入&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gem&quot;&gt;gem update --system
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来升级gem。这里有可能会遇到问题,因为被墙原因导致ssl错误，这时可以替换一下gem软件源：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gem&quot;&gt;//查看当前所有软件源
gem sources -l
//自带的源是https://rubygems.org/ 删除
gem source -r https://rubygems.org/
//添加新源
gem source -a http://rubygems.org/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;网上许多解决此问题是通过替换淘宝源http://ruby.taobao.org/成功的，刚开始笔者也是这样干的，但是并没有卵用，最后还是去掉了’s’成功的。还有一点需要注意的是，在添加源的时候，你不能在git-bash中添加，会提示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR:  While executing gem ... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Gem::OperationNotSupportedError&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    Not connected to a &lt;span class=&quot;nb&quot;&gt;tty &lt;/span&gt;and no default specified
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是说连接不到终端，所以，你需要使用cmd或者是微软新出的windows powershell来添加源才可以。&lt;/p&gt;

&lt;p&gt;然后&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;下载DevKit&lt;/a&gt; ，跟ruby在同一个下载页面。安装后找到DevKit目录，输入以下命令：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里需要说明的是，你在dk初始化之后,会提示你查看config.yml中的根目录是否正确，而事实上这个文件里根本就没有配置，你需要添加上自己的ruby目录，如下：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:\&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ruby22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后才去执行下面的install命令。&lt;/p&gt;

&lt;p&gt;好啦，接下来就可以安装jekyll了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gem&quot;&gt;//安装 注意，jekyll都是小写，大小写是敏感的
gem install jekyll
//查看版本号，以确定是否安装成功
jekyll --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;安装jekyll-bootstrap&quot;&gt;安装Jekyll-Bootstrap：&lt;/h3&gt;

&lt;p&gt;来到你的本地仓库目录，打开git-bash:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.com

cd USERNAME.github.com

git remote set-url origin git@github.com:USERNAME/USERNAME.github.com.git

git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;启动jekyll服务&quot;&gt;启动jekyll服务&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-jekyll&quot;&gt;jekyll server --port 4000//4000是默认端口号
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;激动人心的时刻到啦，现在去浏览器输入：&lt;a href=&quot;http://127.0.0.1:4000&quot;&gt;http://127.0.0.1:4000&lt;/a&gt; ，看看自己的本地博客吧。&lt;/p&gt;

&lt;p&gt;不过还没结束呢，激动之余，是不是感觉还有点乱呢？分析一下目录：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;_posts:&lt;/strong&gt; _posts中的数据文档，通过注入_layouts定义的模板，通过jekyll server最终生成的静态页面在_sites目录。目录是用来存放你的文章的，一般以日期的形式书写标题。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_layouts：&lt;/strong&gt; _layouts中的模板一般指向了_includes/themes中的模板。目录是用来存放模板的，在这里你可以定义页面中不同的头部和底部。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_includes：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;_includes/JB中有一些常用的工具，用于列表显示、评论等；
_includes/themes中可参看主题的相关html文档。
_includes/themes中的主题一般包含default.html、post.html和page.html三个文档。default.html定义了网站的最上层框架（模板），post.html和page.html是其子框架（模板）
生成好的html子页面通过default.html的{{ content }}变量调用，生成整个页面。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;asset:&lt;/strong&gt; 渲染页面的CSS和JS文档在assets/themes中。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_config.yml:&lt;/strong&gt; 站点生成需要用到_config.yml配置文件，站点的全局变量在_config.yml中定义，用site.访问；页面的变量在YAML Front Matter中定义，用page.访问，更多的模板变量可参考模板数据。&lt;a href=&quot;http://www.zhanxin.info/jekyll/2013-08-07-jekyll-configuration.html&quot;&gt;jekyll配置详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然，并不是一定要这样做，只是一个习惯而已，如果你完全是自定义的，那么你可能都没有这些东西。&lt;/p&gt;

&lt;h1 id=&quot;第一篇博客开始之前&quot;&gt;第一篇博客开始之前&lt;/h1&gt;

&lt;p&gt;其实博客开始前的工作基本算是说完了，可是我觉得还是要对这个layout进行补充一下：&lt;/p&gt;

&lt;h3 id=&quot;去网上找现成的layout&quot;&gt;去网上找现成的layout&lt;/h3&gt;

&lt;p&gt;layout即是你的blog的样式和布局，网上有许多精美的主题供&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;自己定义layout&quot;&gt;自己定义layout&lt;/h3&gt;

&lt;p&gt;从头自定义的话，无疑很是费劲,所以我建议也像我一样，找到现成的模板，慢慢修改。&lt;/p&gt;

&lt;h1 id=&quot;写第一篇博客&quot;&gt;写第一篇博客&lt;/h1&gt;

&lt;p&gt;直接使用markdown来写好了，唯一需要说一下的的是文件头的声明格式：&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;My&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Blog&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello Blog&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2016-03-20 17:45:00&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;PfCStyle&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;keywords&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;- Github&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;- Blog&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;- Jekyll&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;- Markdown&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;- CDName&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;- layout&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看意思应该都明白是什么，不再赘述了，但是，需要提醒大家的是这些不是固定的，不同的layout是有不同参数的。再来张图吧：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-20/blog_head.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;最后是找个自己的域名&quot;&gt;最后是找个自己的域名&lt;/h1&gt;

&lt;p&gt;首先是购买一个域名，域名购买之后，要先设置解析，你购买域名的地方都是可以设置的，过程大致相似：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-20/cdname.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后还需要在你的博客分支根目录下添加CNAME文件，里面放上你的域名就可以了，github就会为你自动跳转。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-20/cnamefile.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-20/cname_config.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ok,大功告成！&lt;/p&gt;</content><author><name>Yawei Wang</name></author></entry><entry><title type="html"></title><link href="https://pfcstyle.github.io/2021/02/06/2016-03-26-Android-Studio1/" rel="alternate" type="text/html" title="" /><published>2021-02-06T17:29:40+08:00</published><updated>2021-02-06T17:29:40+08:00</updated><id>https://pfcstyle.github.io/2021/02/06/2016-03-26-Android-Studio1</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/06/2016-03-26-Android-Studio1/">&lt;blockquote&gt;
  &lt;p&gt;工欲善其事，必先利其器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;相信使用过eclipse的朋友们都体验过eclipse每次装插件都装不上的痛苦，尤其是配置adt，最是让人头痛，因为还面临着adt和sdk版本不匹配的问题，特别是每次google发布新的sdk，adt就必须跟着升级才行，实在是苦不堪言。终于，历时两年，google终于推出了android studio,完善的插件体统，以及对eclipse等工程的兼容，还有方便的sdk管理，最后再集成了Gradle项目管理，真是处处体现了android studio的强大与方便。&lt;/p&gt;

&lt;p&gt;android studio的安装我相信不用多说，我们直接从hello world开始。&lt;/p&gt;

&lt;h1 id=&quot;hello-world&quot;&gt;Hello World&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/hello_world.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你是刚刚装好了Android Studio,你应该是在欢迎界面，点击Create New Project,或者你已经打开或者导入过项目了，那就选择File&amp;gt;New&amp;gt;New Project,然后你会看到下图的界面。在Application name中填上Hello World，这里建议是以大写字母开头。Company Domain就是公司域名，Package name是反转的Company Domain加上Application Name。最后修改你的工程路径，本次修改后，路径会记录，下次如果不想修改就不用管了，感觉这个比设置默认的工作路径要方便很多。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/newproject.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;next之后是硬件选择界面，Phone and Tablet(手机和平板)是默认被选中的，下面依次是Wear(手表)、TV(电视)、Android Auto(车载应用)、Glass(眼镜),他们每一项都要求设定最低支持的SDK版本，你们可以根据自己的需求来设定，如果自己无法确定，下面还有一个Help me choose,他可以向你展示android各个版本的市场份额，可以帮助你确定你的需求。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/choose_devices.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;next之后是模板选择界面，我们这里选择empty Activity&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/template.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;next之后是设置activity的名称这些，我们就使用默认的就好了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/activity.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击完成，我们的hello world就创建成功了！&lt;/p&gt;

&lt;h3 id=&quot;使用虚拟机运行hello-world&quot;&gt;使用虚拟机运行Hello World&lt;/h3&gt;

&lt;p&gt;Android虚拟设备管理器允许你创建Android虚拟设备（AVDs），然后你可以在你的电脑上运行&lt;strong&gt;模拟器&lt;/strong&gt;。模拟和仿真有一个很重要但是微妙的区别。模拟意味着虚拟设备只有一个外形，模拟实际的物理设备如何运作，但是不针对特定的操作系统。IOS开发环境使用模拟器，对于有限数量的设备的平台的IOS来说可能是一个不错的选择。&lt;/p&gt;

&lt;p&gt;然而对于&lt;strong&gt;仿真器&lt;/strong&gt;而言，你的电脑留出一块内存去复制基于仿真器正在仿真设备上的环境。Android Studio使用仿真器，这意味着Android虚拟设备管理器启动一个 Linux内核的大沙箱和整个Android栈为了仿真基于Android物理设备的环境。尽管仿真器提供了一个比模拟器更可靠的环境来测试你的应用程序，但是启动一个AVD需要数分钟，这取决于你电脑的速度。好消息是你的仿真器仍然活跃在内存中，它仍然是有响应的。然而，如果你有Android手机或者平板电脑，我们建议使用物理设备来测试你的应用程序，而不是使用AVD。也就是说，我们首先使用Android虚拟设备管理器创建一个AVD，在后来的章节我们将想你展示如何连接你的物理设备,当然如果你有的话。&lt;/p&gt;

&lt;p&gt;下面我们将创建一个仿真器，选择工具栏中的avd manager&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/avd_manage.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开之后，点击左下角的Create Virtual Device,选择Galaxy Nexus，然后点击Next。下一个界面允许你选择一个系统镜像。选择Lollopop（或最新的API）和x86_64的API,如果你没有，那么点击download下载就好了，android studio会自动为你配置好的。点击Next&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/select_virtual.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/choose_image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来是虚拟机的具体的一些配置参数，点击show Advanced Settings会显示出更多的高级选项。下图中会详细标出，点击finish，恭喜你，你的第一个虚拟机已经创建成功了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/virtual_config1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/virtual_config2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击绿色按钮运行，选择你刚刚创建的虚拟机，你将会看到hello world。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/run.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/ok.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用真机运行hello-world&quot;&gt;使用真机运行Hello World&lt;/h3&gt;

&lt;p&gt;使用真机调试的关键是要让你的电脑连接上你的手机，你可能需要安装与你的手机匹配的USB驱动，你可以自己去找一下，也可以让360之类的手机助手帮你安装，现在已经不是问题了。此外，你还需要打开开发人员选项并确保USB调试框被选中。当你成功连接真机之后，你可以在android device monitor中查看你的真机是否出现，并且状态为online，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-26/device_manager.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来，直接点击运行就好了，Hello World应该成功出现在你的手机上了。&lt;/p&gt;</content><author><name>Yawei Wang</name></author></entry><entry><title type="html"></title><link href="https://pfcstyle.github.io/2021/02/06/2016-03-27-VS-WDK-SDK/" rel="alternate" type="text/html" title="" /><published>2021-02-06T17:29:40+08:00</published><updated>2021-02-06T17:29:40+08:00</updated><id>https://pfcstyle.github.io/2021/02/06/2016-03-27-VS-WDK-SDK</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/06/2016-03-27-VS-WDK-SDK/">&lt;blockquote&gt;
  &lt;p&gt;困难总是需要克服的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这两天一直在搭建驱动开发环境，本来是VS2010的，后来网上找了一下，配置起来比较麻烦，就没有去搞，直接换了VS2015了，然而，事情并没有想象中的那么简单。&lt;/p&gt;

&lt;h1 id=&quot;从vs2015开始&quot;&gt;从VS2015开始&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-27/vs2015.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;刚开始我很自然的就去了微软的官网，也找到了&lt;strong&gt;VS2015&lt;/strong&gt;,而且和&lt;strong&gt;WDK10&lt;/strong&gt;在一起，于是我很开心的&lt;a href=&quot;https://msdn.microsoft.com/en-us/windows/hardware/hh852365&quot;&gt;下载&lt;/a&gt;了下来，当然，只是一个安装器而已，于是，就苦逼的在线开始下载安装，然而，等来的却全是失败。&lt;/p&gt;

&lt;p&gt;每次安装失败的都不一样，我去网上搜，也找到了各种答案(?),但没有一个可以解决我的问题。于是乎，好吧，找到了&lt;a href=&quot;http://pan.baidu.com/s/1kUHXCEj&quot;&gt;VS2015离线安装包&lt;/a&gt;，直接安装，什么问题也没有了。但是值得提醒的是你要记得在安装的时候选择自定义，然后把C++相关的装上，不然WDK安装的时候会提示你安装。然后，你应该和我一样，没有什么问题了。&lt;/p&gt;

&lt;h1 id=&quot;wdk-和-sdk-的安装&quot;&gt;WDK 和 SDK 的安装&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;WDK&lt;/strong&gt;和&lt;strong&gt;SDK&lt;/strong&gt;同样也是可以从微软官网找到的，我就不提供链接了，为什么？没有用啊，下载的只是下载器，等待的仍然是失败！我就只好提供&lt;a href=&quot;http://pan.baidu.com/s/1geEHZDT&quot;&gt;WDK10&lt;/a&gt;和&lt;a href=&quot;http://pan.baidu.com/s/1jIztc6U&quot;&gt;SDK10&lt;/a&gt;的百度云了。直接安装就好了，相信不会有任何问题。&lt;/p&gt;

&lt;p&gt;另外提一下啊，如果你还想研究xp的话，那么你需要下载&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=11800&quot;&gt;WDK7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;好吧，想不到折磨了我好几天，甚至让我重装了一次系统的问题，三言两语就写完了，洗过了，睡了。&lt;/p&gt;</content><author><name>Yawei Wang</name></author></entry><entry><title type="html"></title><link href="https://pfcstyle.github.io/2021/02/06/2016-03-28-Clean-DiskC/" rel="alternate" type="text/html" title="" /><published>2021-02-06T17:29:40+08:00</published><updated>2021-02-06T17:29:40+08:00</updated><id>https://pfcstyle.github.io/2021/02/06/2016-03-28-Clean-DiskC</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/06/2016-03-28-Clean-DiskC/">&lt;blockquote&gt;
  &lt;p&gt;小记&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面是C盘可以清理的路径：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-path&quot;&gt;- C盘搜索FileRepository,这是windows自动推送的驱动更新，全选，删除。如果有些删不掉就跳过。
- C:\Windows\SoftwareDistribution\Download
- C:\Users\**user**\AppData\Local\Temp
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Yawei Wang</name></author></entry><entry><title type="html"></title><link href="https://pfcstyle.github.io/2021/02/06/2016-03-29-Android-sources-download/" rel="alternate" type="text/html" title="" /><published>2021-02-06T17:29:40+08:00</published><updated>2021-02-06T17:29:40+08:00</updated><id>https://pfcstyle.github.io/2021/02/06/2016-03-29-Android-sources-download</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/06/2016-03-29-Android-sources-download/">&lt;blockquote&gt;
  &lt;p&gt;透过现象看本质&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先跟大家推荐一个&lt;a href=&quot;http://laod.cn/hosts/2016-google-hosts.html&quot;&gt;网站&lt;/a&gt;,这里提供了可以翻墙的hosts，毕竟google,大家都懂得。&lt;/p&gt;

&lt;p&gt;最近想看看android的源码，于是就去google下载，google提供了具体的环境需求和下载方式，大家可以参考&lt;a href=&quot;https://source.android.com/source/initializing.html&quot;&gt;这里&lt;/a&gt;,但是，google官方提供的这种方式只能用于linux,因为它提供的repo是一个python脚本，里面一些模块是linux特有的，windows无法安装。&lt;/p&gt;

&lt;p&gt;一种变通的方式是在windows上安装Cygwin，这是一个模拟linux环境的软件，安装好后再按照google官网说的搭建环境，下载源码即可。&lt;/p&gt;

&lt;p&gt;但是我觉得上面的过程都太复杂了，用起来很不方便，后来我看了下google官方提供的repo文件，发现其本质就是先使用git clone下来android源码的&lt;a href=&quot;https://android.googlesource.com/platform/manifest/&quot;&gt;清单文件&lt;/a&gt;,所以，你需要先安装git,git的安装就不说了，我之前的博客已经有介绍过了。假设你已经装好了git,找到你想要放android源码的目录，执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git clone https://android.googlesource.com/platform/manifest
cd manifest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来执行:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;//列出android各个分支版本
git tag 
//使用git checkout 切换到你想要的源码的分支，名称就是git tag列出的名称，比如android4.4.2
git checkout android-4.4.2_r1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里所谓的切换分支只是切换到了对应分支的manifest清单文件，接下来，我们将使用清单文件进行源码下来，下面，有请python出场。&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;下载&lt;/a&gt;安装python，具体过程我就不说了，很简单。建议安装python2.7，比较稳定。&lt;/p&gt;

&lt;p&gt;这里提供一个根据manifest清单文件下载的python脚本，我在网上找到了下载的基础代码，自己添加了断点续传，方便大家使用。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;xml.dom.minidom&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;stat&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#downloaded source path
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;F:/Documents/android_src/AndroidCode&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#git program path
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D:/Git/bin/git.exe&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minidom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;F:/Documents/android_src/AndroidCode/manifest/default.xml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentElement&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; clone https://aosp.tuna.tsinghua.edu.cn/&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.git&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rmtree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_IWUSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rmdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rmdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;lastPath_pre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lastPath_all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;project&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d_all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d_per&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d_all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_all&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d_per&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d_all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_all&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_per&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lastPath_all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_all&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lastPath_pre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_per&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastPath_all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rmtree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastPath_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastPath_pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lastPath_all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意的是要将里面的git和存放源代码路径都替换为你自己的。上面我使用的是清华的镜像，速度很快，推荐使用，如果不放心，可以自己替换为google的https://android.googlesource.com/，但是表示速度难以忍受。。。&lt;/p&gt;</content><author><name>Yawei Wang</name></author></entry><entry><title type="html"></title><link href="https://pfcstyle.github.io/2021/02/06/2016-03-30-Android-Studio2/" rel="alternate" type="text/html" title="" /><published>2021-02-06T17:29:40+08:00</published><updated>2021-02-06T17:29:40+08:00</updated><id>https://pfcstyle.github.io/2021/02/06/2016-03-30-Android-Studio2</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/06/2016-03-30-Android-Studio2/">&lt;blockquote&gt;
  &lt;p&gt;工欲善其事，必先利其器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天说一下代码方面常用的设置，以及快捷键。&lt;/p&gt;

&lt;h1 id=&quot;常用快捷键记录&quot;&gt;常用快捷键记录&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Ctrl + N 使用输入类名对话框快速打开类文件&lt;/li&gt;
  &lt;li&gt;Ctrl + Shift + N 搜索所有的文件名&lt;/li&gt;
  &lt;li&gt;Ctrl + Shift + A 动作或选项搜索框，如搜索show line numbers就会自动列出显示行数的开关，支持模糊查询&lt;/li&gt;
  &lt;li&gt;Ctrl + Shift + F/R 全局搜索/替换，可以搜索/替换文件内容，还可以设置过滤&lt;/li&gt;
  &lt;li&gt;Ctrl + G 以行和列导航单个文件，如果只输入一个数字，就是调到行&lt;/li&gt;
  &lt;li&gt;Ctrl + Alt + Home 列出与当前文件相关联的文件，如：xml&lt;/li&gt;
  &lt;li&gt;Ctrl + Shift + Backspace 移动到最后编辑位置&lt;/li&gt;
  &lt;li&gt;Ctrl + ‘+’(数字键盘的) 展开代码块&lt;/li&gt;
  &lt;li&gt;Ctrl + ‘-‘(数字键盘的) 收缩代码块&lt;/li&gt;
  &lt;li&gt;Ctrl + Space 基本代码补全功能，附带javadoc展示&lt;/li&gt;
  &lt;li&gt;Ctrl + Shift + Space 智能代码补全，比基本代码补全范围更广&lt;/li&gt;
  &lt;li&gt;Ctrl + ‘/’ 行注释&lt;/li&gt;
  &lt;li&gt;Ctrl + Shift + ‘/’ 块注释&lt;/li&gt;
  &lt;li&gt;Ctrl + z 撤销&lt;/li&gt;
  &lt;li&gt;Ctrl + Shift + z 恢复撤销&lt;/li&gt;
  &lt;li&gt;Ctrl + J 调用动态模板，这是打出了缩略词之后调用&lt;/li&gt;
  &lt;li&gt;Ctrl + Alt + J 显示出动态模板列表&lt;/li&gt;
  &lt;li&gt;Ctrl + Shift + Down 向下移动代码块&lt;/li&gt;
  &lt;li&gt;Ctrl + Shift + Up 向上移动代码块&lt;/li&gt;
  &lt;li&gt;Ctrl + Alt + L 自动格式化代码&lt;/li&gt;
  &lt;li&gt;Ctrl + Alt + I 自动缩进代码&lt;/li&gt;
  &lt;li&gt;Code ➤ Rearrange 自动整理代码&lt;/li&gt;
  &lt;li&gt;Ctrl + Alt + T 环绕代码 如try/catch,if/else等等&lt;/li&gt;
  &lt;li&gt;Ctrl + Shift +Delete 删除环绕代码&lt;/li&gt;
  &lt;li&gt;Ctrl + E 查看最近打开过的文件 默认最多记录50个&lt;/li&gt;
  &lt;li&gt;Ctrl + Alt + 左箭头 遍历导航操作，上一个导航&lt;/li&gt;
  &lt;li&gt;Ctrl + Alt + 右箭头 遍历导航操作，下一个导航&lt;/li&gt;
  &lt;li&gt;Alt + ‘/’ 循环扩展&lt;/li&gt;
  &lt;li&gt;Alt + ‘F1’ 打开导航列表&lt;/li&gt;
  &lt;li&gt;Alt + Insert 生成代码，包括构造器，getter,setter等等&lt;/li&gt;
  &lt;li&gt;Shift + Tab 取消缩进&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;常用设置&quot;&gt;常用设置&lt;/h1&gt;

&lt;h3 id=&quot;代码生成设置&quot;&gt;代码生成设置&lt;/h3&gt;

&lt;p&gt;恰当的使用代码生成功能，这一特色将为你节约大量的时间，代码生成是生成各种方法的的强大功能，包括了构造，getters, setters, equals()，hashCode(), toString()方法等等。在你使用代码生成之前，确认Android Studio 是配置好了，可以忽略成员名称的前缀，如m和s（因为我们一般遵循成员变量前加’m’，静态变量前加’s’的规则），点击File ➤ Settings ➤ Code Style ➤ Java ➤ Code Generation将得到设置对话框，将会出现代码生成的标签页，如果域和静态域文本框不包含m和s，则键入他们，并点击”应用“和”确定“，如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-30/generator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;在模板中保存自己常用的代码&quot;&gt;在模板中保存自己常用的代码&lt;/h3&gt;

&lt;p&gt;Android Studio有很多模板,允许您将预定义的代码直接插入到你的源文件中。在许多ide,生成的代码只是从模板中粘贴，而从来不考虑作用域;但是Android Studion的模板是对作用域敏感的,也可以集成变量数据。在你开始使用Android Studio的动态模板之前,让我们探索动态模板和自定义模板。导航到File ➤ Settings ➤ Live Templates。选择普通模板组。现在在右上角单击绿色加号按钮并选择住模板。如图，填充好缩写、描述和模板文本字段。在这个模板可以应用之前,您必须单击Define按钮,这看起来像一个蓝色的超文本链接，位于窗口的底部。现在选择Java和选择所有范围(语句,表达式,声明等等)。单击Apply&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-30/live_tem.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中的$selection$意思是你选择的内容，你先选择一段文字，然后按Ctrl + Alt + J，选择cb模板，就会自动出现上图中定义的内容了。&lt;/p&gt;

&lt;h3 id=&quot;定义你自己的代码风格&quot;&gt;定义你自己的代码风格&lt;/h3&gt;

&lt;p&gt;代码风格规范在不断发展。没有固定的规则，你应该在你的方法之后放置空格的数量，还是左括号应该出现在同一行作为方法签名或略低于它。组织倾向于定义自己的代码风格,但每个程序员的代码风格也各不相同,你也可能有你习惯的代码风格。幸运的是,Android Studio很简单就能样式化和组织你的代码。在开始样式化代码之前，让我们检查一下代码风格的设置。选择File ➤ Settings ➤ Code Style弹出设置对话框,如图所示。Java和XML是我们在Android中最感兴趣的语言。在左窗格中切换打开代码风格选项,选择Java,并检查在设置窗口的每个选项卡&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-30/code_style.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;代码风格的定义选项非常多，建议大家自己点击多试试，在右侧的代码框中会即时响应你的修改。&lt;/p&gt;</content><author><name>Yawei Wang</name></author></entry><entry><title type="html"></title><link href="https://pfcstyle.github.io/2021/02/06/2016-04-09-Android-Studio3/" rel="alternate" type="text/html" title="" /><published>2021-02-06T17:29:40+08:00</published><updated>2021-02-06T17:29:40+08:00</updated><id>https://pfcstyle.github.io/2021/02/06/2016-04-09-Android-Studio3</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/06/2016-04-09-Android-Studio3/">&lt;blockquote&gt;
  &lt;p&gt;工欲善其事，必先利其器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天大致的介绍一下Gradle&lt;/p&gt;

&lt;h1 id=&quot;为什么要用gradle&quot;&gt;为什么要用Gradle&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;一个像Ant一样灵活且通用的构建工具。&lt;/li&gt;
  &lt;li&gt;一种可切换的，像Maven一样的基于约定的构建框架，却又从不约束你（约定优于配置）。&lt;/li&gt;
  &lt;li&gt;对多项目构建的强力支持。&lt;/li&gt;
  &lt;li&gt;对依赖管理的强力支持（基于Apache Ivy）。&lt;/li&gt;
  &lt;li&gt;对已有的Maven和Ivy仓库有着全面的支持。&lt;/li&gt;
  &lt;li&gt;支持可传递性的依赖管理，而不需要远程仓库或者pom.xml和ivy.xml配置文件。&lt;/li&gt;
  &lt;li&gt;Gradle能够很好地支持Ant任务和构建 。（有更好的翻译欢迎提议）&lt;/li&gt;
  &lt;li&gt;支持用Groovy语言编写Gradle的脚本。&lt;/li&gt;
  &lt;li&gt;拥有丰富的领域模型来构建你的脚本。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gradle的核心是一个丰富的可扩展的基于Groovy的领域特定语言(DSL)。Gradle通过提供说明性语言元素将说明性构建推到下一层，您可以组装。这些元素也提供build-by-convention支持Java、Groovy、OSGi、Web和Scala项目。说了这么多，下面我们来一个快速入门。&lt;/p&gt;

&lt;h1 id=&quot;gradle快速入门&quot;&gt;Gradle快速入门&lt;/h1&gt;

&lt;h3 id=&quot;gradle安装&quot;&gt;Gradle安装&lt;/h3&gt;

&lt;p&gt;Gradle需要安装1.6及以上版本的Java JDK或JRE（使用java -version来查看当前版本）。Gradle拥有自己的Groovy库，因此不需要另行安装Groovy。任何已安装的Groovy都会被Gradle给忽略。Gradle使用环境变量中设置的JDK。&lt;/p&gt;

&lt;h3 id=&quot;代码生成设置&quot;&gt;代码生成设置&lt;/h3&gt;

&lt;p&gt;恰当的使用代码生成功能，这一特色将为你节约大量的时间，代码生成是生成各种方法的的强大功能，包括了构造，getters, setters, equals()，hashCode(), toString()方法等等。在你使用代码生成之前，确认Android Studio 是配置好了，可以忽略成员名称的前缀，如m和s（因为我们一般遵循成员变量前加’m’，静态变量前加’s’的规则），点击File ➤ Settings ➤ Code Style ➤ Java ➤ Code Generation将得到设置对话框，将会出现代码生成的标签页，如果域和静态域文本框不包含m和s，则键入他们，并点击”应用“和”确定“，如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-30/generator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;在模板中保存自己常用的代码&quot;&gt;在模板中保存自己常用的代码&lt;/h3&gt;

&lt;p&gt;Android Studio有很多模板,允许您将预定义的代码直接插入到你的源文件中。在许多ide,生成的代码只是从模板中粘贴，而从来不考虑作用域;但是Android Studion的模板是对作用域敏感的,也可以集成变量数据。在你开始使用Android Studio的动态模板之前,让我们探索动态模板和自定义模板。导航到File ➤ Settings ➤ Live Templates。选择普通模板组。现在在右上角单击绿色加号按钮并选择住模板。如图，填充好缩写、描述和模板文本字段。在这个模板可以应用之前,您必须单击Define按钮,这看起来像一个蓝色的超文本链接，位于窗口的底部。现在选择Java和选择所有范围(语句,表达式,声明等等)。单击Apply&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-30/live_tem.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中的$selection$意思是你选择的内容，你先选择一段文字，然后按Ctrl + Alt + J，选择cb模板，就会自动出现上图中定义的内容了。&lt;/p&gt;

&lt;h3 id=&quot;定义你自己的代码风格&quot;&gt;定义你自己的代码风格&lt;/h3&gt;

&lt;p&gt;代码风格规范在不断发展。没有固定的规则，你应该在你的方法之后放置空格的数量，还是左括号应该出现在同一行作为方法签名或略低于它。组织倾向于定义自己的代码风格,但每个程序员的代码风格也各不相同,你也可能有你习惯的代码风格。幸运的是,Android Studio很简单就能样式化和组织你的代码。在开始样式化代码之前，让我们检查一下代码风格的设置。选择File ➤ Settings ➤ Code Style弹出设置对话框,如图所示。Java和XML是我们在Android中最感兴趣的语言。在左窗格中切换打开代码风格选项,选择Java,并检查在设置窗口的每个选项卡&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-03-30/code_style.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;代码风格的定义选项非常多，建议大家自己点击多试试，在右侧的代码框中会即时响应你的修改。&lt;/p&gt;</content><author><name>Yawei Wang</name></author></entry><entry><title type="html"></title><link href="https://pfcstyle.github.io/2021/02/06/2016-04-25-VPS-softether/" rel="alternate" type="text/html" title="" /><published>2021-02-06T17:29:40+08:00</published><updated>2021-02-06T17:29:40+08:00</updated><id>https://pfcstyle.github.io/2021/02/06/2016-04-25-VPS-softether</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/06/2016-04-25-VPS-softether/">&lt;blockquote&gt;
  &lt;p&gt;所有的墙都是纸老虎-PfCStyle&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我真是觉得很悲催，眼望着马上要毕业了，我们学校网络中心发了一个通告，从此，每月20元不限流量的舒服日子结束了，以后要根据流量算每月的网费了，再也不能随心所欲的看想看的片了。。。&lt;/p&gt;

&lt;p&gt;然而，作为一个崇尚自由的程序猿，面对一切封锁，都要打破！打破！打破！于是我伸展一下那过膝的双臂，准备翻墙了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/fanqiang.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大家都知道，大学的ipv6的流量一直是免费的，而我，将要利用的就是这个。下面就是我的翻墙历程。&lt;/p&gt;

&lt;h1 id=&quot;从vps开始&quot;&gt;从VPS开始&lt;/h1&gt;

&lt;p&gt;首先，我得选择一个免费的VPS进行试验，于是我在网上找呀找，找到了&lt;a href=&quot;http://aws.amazon.com/cn/&quot;&gt;亚马逊的aws&lt;/a&gt;, 只要你有一张信用卡，那么，你可以很轻松的获得12个月的免费试用。具体免费套餐内容请浏览&lt;a href=&quot;https://aws.amazon.com/cn/free/&quot;&gt;这里&lt;/a&gt;. 没有信用卡？没有关系，经网友们测试，从淘宝买的虚拟信用卡可以用作激活Amazon AWS，关键词：“虚拟信用卡 amazon”.&lt;/p&gt;

&lt;h3 id=&quot;注册aws&quot;&gt;注册aws&lt;/h3&gt;

&lt;p&gt;好的，都准备好了，现在，去&lt;a href=&quot;http://aws.amazon.com/cn/&quot;&gt;亚马逊的aws&lt;/a&gt; 注册一个账号。看图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsres1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsres2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsres3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsres4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsres5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsres6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsres7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsres8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这一步一定要注意，因为默认选择的是开发人员选项，要扣40美金的偶，立刻就会扣，没有反应时间。。。好吧，被看出来了，我被扣了–&lt;/p&gt;

&lt;p&gt;这一步之后注册就算是完成了，等待几分钟账号就会被激活了，有些人的会等很久才能激活，可能跟前面填写的信息有关系。&lt;/p&gt;

&lt;h3 id=&quot;开始创建vps&quot;&gt;开始创建VPS&lt;/h3&gt;

&lt;p&gt;这个描述起来也是相当麻烦，大家看图吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awslogin1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awslogin2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsbuild7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsbuild1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsbuild2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsbuild3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsbuild4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsbuild5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/awsbuild6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到了这里，已经算是把一个VPS建好了，需要什么服务都可以自己配置了，接下来说如何本地连接到远程VPS,有多种方式，大家可以详细参看&lt;a href=&quot;https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/AccessingInstances.html?icmpid=docs_ec2_console&quot;&gt;官网教程&lt;/a&gt;, 我这里只介绍我使用的方式，putty连接。&lt;/p&gt;

&lt;h3 id=&quot;连接vps&quot;&gt;连接VPS&lt;/h3&gt;

&lt;h4 id=&quot;1软件准备&quot;&gt;1.软件准备&lt;/h4&gt;

&lt;p&gt;从&lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&quot;&gt;putty下载页面&lt;/a&gt; 下载putty和puttygen.&lt;/p&gt;

&lt;p&gt;putty是用来连接VPS的，但是VPS的连接需要提供秘钥，就是上文要你下载的pem文件。但是putty并不直接支持pem文件，你需要把pem文件转换为ppk文件，这就需要puttygen来完成了，下面，我们来转换。&lt;/p&gt;

&lt;h4 id=&quot;2转换秘钥格式&quot;&gt;2.转换秘钥格式&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/VPSconnect1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/VPSconnect2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/VPSconnect3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样就转换好了，接下来我们开始正式连接VPS了：&lt;/p&gt;

&lt;h4 id=&quot;3获取连接vps需要的信息&quot;&gt;3.获取连接VPS需要的信息&lt;/h4&gt;

&lt;p&gt;实例的获取公有DNS信息，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/VPSconnect4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;填写信息：Host Name的格式是user_name@public_dns_name，其中user_name是root 或 ec2-user，但是经过测试，root是禁止直接登录的，所以只能使用ec2-user。注意不同的linux系统user_name是不同的，这里说得是Redhat，请到上文提到的官网教程查看具体内容。public_dns_name就是上步获取的公有dns&lt;/p&gt;

&lt;p&gt;为了避免每次都重复填写，可以点击save按钮进行配置保存。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/VPSconnect5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置上文转换过得秘钥&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/VPSconnect6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4连接&quot;&gt;4.连接&lt;/h4&gt;

&lt;p&gt;点击open启动&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/VPSconnect7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在已经连上了VPS了，大家想干什么就随意吧。&lt;/p&gt;

&lt;h1 id=&quot;开始配置vpn-使用softether&quot;&gt;开始配置VPN 使用SoftEther&lt;/h1&gt;

&lt;h3 id=&quot;软件准备&quot;&gt;软件准备&lt;/h3&gt;

&lt;p&gt;在VPS上&lt;a href=&quot;http://www.softether-download.com/cn.aspx?product=softether&quot;&gt;下载softEther VPN&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpndownload1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你可以选择下载最新版本的，也可以选择较为稳定的版本。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//首先安装wget
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;wget
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;wget http://www.softether-download.com/files/softether/v4.20-9608-rtm-2016.04.17-tree/Linux/SoftEther_VPN_Server/64bit_-_Intel_x64_or_AMD64/softether-vpnserver-v4.20-9608-rtm-2016.04.17-linux-x64-64bit.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpndownload2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个网上有些教程说下载这个是需要翻墙的，对于国内用户确实是这样，但是，但aws可是在美国呢，嘿嘿，不用担心，直接下就好了，速度杠杠的。还是提供一下&lt;a href=&quot;http://pan.baidu.com/s/1jH9Vqpo&quot;&gt;百度云下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;插一下，putty经常死机，准确来说，如果你隔了两三分钟没有操作，aws就会把你的连接踢掉，但是如果你一直在使用就不会有什么问题的。死机了就重连好了。&lt;/p&gt;

&lt;h3 id=&quot;开始安装&quot;&gt;开始安装&lt;/h3&gt;

&lt;p&gt;好的，下载完成了，解压：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-zxvf&lt;/span&gt; softether-vpnserver-v4.20-9608-rtm-2016.04.17-linux-x64-64bit.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来开始配置VPN了，是不是想想都要头疼了？但是，史上最简单，可不是白说的，看看一键配置！&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vpnserver/
./.install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来，它会让你阅读用户协议，然后让你同意，你就连输入3个‘1’就ok了，进入正式安装。oh!出错了，提示缺少gcc，不早说。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//安装gcc
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gcc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装完毕，再去执行上面的命令，输入3个‘1’，安装成功啦（如果你使用的其他系统，获取其他VPS，可能会缺少其他的依赖，按照错误提示一个个安装即可），好了，试试：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./vpnserver start
./vpnserver stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so easy!&lt;/p&gt;

&lt;h3 id=&quot;在本地管理vpn&quot;&gt;在本地管理VPN&lt;/h3&gt;

&lt;h4 id=&quot;下载管理软件&quot;&gt;下载管理软件&lt;/h4&gt;

&lt;p&gt;好吧，还得需要&lt;a href=&quot;http://www.softether-download.com/cn.aspx?product=softether&quot;&gt;下载&lt;/a&gt; 一个管理软件，这个要翻墙了。如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里提供&lt;a href=&quot;http://pan.baidu.com/s/1jH9Vqpo&quot;&gt;百度云下载&lt;/a&gt;。 下载之后解压就可以使用了，打开vpnsmgr.exe。&lt;/p&gt;

&lt;h4 id=&quot;配置连接&quot;&gt;配置连接&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;连接vpn-server&quot;&gt;连接VPN server&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;欧，遇到问题了，为什么会连接不上呢？现在要来说说aws的安全组是怎么一回事了。这个安全组类似于防火墙，你可以配置允许出入的协议和流量，看图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置允许访问的端口和协议，这些端口都是softether监听的端口号，在官网可以找到。如果你实在是觉得烦，可以开放所有流量，这个你自己决定吧，不安全偶~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好的，接下来成功连接&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你会进入下面这个界面（刚刚进入，会提示你进行各种配置，全X掉吧，我一步步的展示）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;配置vpn&quot;&gt;配置VPN&lt;/h4&gt;

&lt;p&gt;配置L2TPVPN&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;管理VPN用户配置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里创建的用户以及密码会在连接vpn时使用。&lt;/p&gt;

&lt;p&gt;配置NAT&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconfig13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个不多解释，按照我的配置来吧。点击确定之后，VPN的所有配置算是完成了。怎么样，全部界面化，是不是非常简单。&lt;/p&gt;

&lt;h1 id=&quot;连接vpn&quot;&gt;连接VPN&lt;/h1&gt;

&lt;p&gt;接下来就是最激动人心的时刻了，试着连接VPN吧。直接使用windows自带的VPN连接就可以了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconnect6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconnect1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconnect2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconnect3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconnect4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconnect5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconnect7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconnect8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconnect9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/vpnconnect10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;连接成功啦！！！&lt;/p&gt;

&lt;h1 id=&quot;ipv6配置&quot;&gt;IPV6配置&lt;/h1&gt;

&lt;p&gt;好的，现在万事俱备，只欠东风啦。配置一个公网的Ipv6就可以了。到哪里找呢，我只推荐&lt;a href=&quot;https://ipv6.he.net/&quot;&gt;HE&lt;/a&gt;, 就是好用，下面看操作。&lt;/p&gt;

&lt;h3 id=&quot;先注册账号&quot;&gt;先注册账号&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/ipv6config7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注册就不多说了，简单。接下来看配置。&lt;/p&gt;

&lt;h3 id=&quot;申请ipv6地址&quot;&gt;申请ipv6地址&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/ipv6config1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/ipv6config2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;申请成功之后就会显示如下界面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/ipv6config3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vps配置ipv6地址&quot;&gt;Vps配置ipv6地址&lt;/h3&gt;

&lt;p&gt;转到下图界面，选择自己的系统，通用的linux就是选择下图的linux-net-tools,然后就会出现下面的配置命令了。但是你要记得在添加sudo权限才可以执行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/ipv6config4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置ipv6的网络命令&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ifconfig sit0 up
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ifconfig sit0 inet6 tunnel ::【he中Server IPv4 Address】
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ifconfig sit1 up
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ifconfig sit1 inet6 add 【he中Server IPv6 Address】
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;route &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; inet6 add ::/0 dev sit1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置完毕之后，进行测试，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/ipv6config5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping ipv6.baidu.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;好了，接下来就可以尝试使用ipv6进行vpnconnect了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-04-25/ipv6config6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个除了主机地址是使用ipv6外，其他都是和ipv4配置相同的。连接就好了，如果你也是在校学生，那么，嘿嘿，我要飞得更高~~&lt;/p&gt;

&lt;p&gt;结束！&lt;/p&gt;

&lt;p&gt;PS:说明一下啊，这个aws的流量并不是无限制的，一个月只有15g（上行和下行分别为15g）的，超过要扣费的。其他具体免费套餐内容参见&lt;a href=&quot;https://aws.amazon.com/cn/free/&quot;&gt;这里&lt;/a&gt;. 但是你们可以用aws练手，然后再去网上租VPS,也挺便宜的。&lt;/p&gt;</content><author><name>Yawei Wang</name></author></entry><entry><title type="html"></title><link href="https://pfcstyle.github.io/2021/02/06/2016-05-26-Android-Studio4-Gradle/" rel="alternate" type="text/html" title="" /><published>2021-02-06T17:29:40+08:00</published><updated>2021-02-06T17:29:40+08:00</updated><id>https://pfcstyle.github.io/2021/02/06/2016-05-26-Android-Studio4-Gradle</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/06/2016-05-26-Android-Studio4-Gradle/">&lt;blockquote&gt;
  &lt;p&gt;如果你不够懒，那么，你就做不好一个程序员。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不说废话，先直接说怎么做吧。&lt;/p&gt;

&lt;h1 id=&quot;友盟多渠道打包&quot;&gt;友盟多渠道打包&lt;/h1&gt;

&lt;p&gt;1.首先是在AndroidManifest.xml里面添加最下面一段：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;me.pfcstyle.helloword&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;application&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:allowBackup=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:icon=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@mipmap/ic_launcher&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@string/app_name&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:supportsRtl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:theme=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@style/AppTheme&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.category.LAUNCHER&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;&amp;lt;!--这里 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta-data&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UMENG_CHANNEL&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{UMENG_CHANNEL_VALUE}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;里面的{UMENG_CHANNEL_VALUE}就是渠道指示，我们配置为PlaceHolder,这样可以在build.gradle里设置productFlavors,从而让其在编译时自动变化。&lt;/p&gt;

&lt;p&gt;2.在build.gradle设置productFlavors&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Gradle&quot;&gt;productFlavors {
        xiaomi {}
        _360 {}
        baidu {}
        wandoujia {}
    }

    productFlavors.all {
        flavor -&amp;gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者这样写也是一样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Gradle&quot;&gt;productFlavors {
        xiaomi {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;xiaomi&quot;]
        }
        _360 {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;_360&quot;]
        }
        baidu {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;baidu&quot;]
        }
        wandoujia {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;wandoujia&quot;]
        }
    }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你想确认一下你的productFlavors是否添加成功了，你可以通过下图验证：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-05-26/flavors.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后命令行定位到你的项目的根目录，执行./gradlew assembleRelease，然后就可以静静的等待各渠道打包完成了。&lt;/p&gt;

&lt;h3 id=&quot;一些可能的问题&quot;&gt;一些可能的问题&lt;/h3&gt;

&lt;p&gt;如果你在执行./gradlew 的时候，提示你要下载类似gradle-2.10-all(这个版本可能不同)，这个下载比较慢，而且你会发现每一个工程都要安装，这本就很不合理，看解决方法！&lt;/p&gt;

&lt;p&gt;去&lt;a href=&quot;https://services.gradle.org/distributions/&quot;&gt;官网&lt;/a&gt;下载对应版本的gradle-v-all.zip，然后到工程根路径-&amp;gt;gradle-&amp;gt;wrapper下找到gradle-wrapper.properties，编辑最后一行的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-property&quot;&gt;distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
//更改为
distributionUrl=gradle-2.10-all.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后将你下载好的zip包放到工程根路径-&amp;gt;gradle-&amp;gt;wrapper下，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-05-26/gradlezip.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好了，再去执行gradlew -v ok啦，显示如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-05-26/zip.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除此之外 assemble 还能和 Product Flavor 结合创建新的任务，其实 assemble 是和 Build Variants 一起结合使用的，而 Build Variants = Build Type + Product Flavor ， 举个例子大家就明白了：&lt;/p&gt;

&lt;p&gt;如果我们想打包wandoujia渠道的release版本，执行如下命令就好了：&lt;/p&gt;

&lt;p&gt;./gradlew assembleWandoujiaRelease
如果我们只打wandoujia渠道版本，则：&lt;/p&gt;

&lt;p&gt;./gradlew assembleWandoujia
此命令会生成wandoujia渠道的Release和Debug版本&lt;/p&gt;

&lt;p&gt;同理我想打全部Release版本：&lt;/p&gt;

&lt;p&gt;./gradlew assembleRelease
这条命令会把Product Flavor下的所有渠道的Release版本都打出来。&lt;/p&gt;

&lt;h1 id=&quot;gradle管理依赖&quot;&gt;Gradle管理依赖&lt;/h1&gt;

&lt;p&gt;gradle最常用的还是管理依赖吧，看看有多简单：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Gradle&quot;&gt;dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha1'
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support:support-annotations:23.4.0'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直接执行上述的编译，gradle就会自动帮你下载添加到依赖，根本不用管了。这在我们使用第三方的时候就会非常方便，一句话，所有需要的jar包什么的都有了。&lt;/p&gt;

&lt;h1 id=&quot;gradle依赖的统一管理&quot;&gt;Gradle依赖的统一管理&lt;/h1&gt;

&lt;p&gt;那么，嘿嘿，更简单的来了，下面说一下依赖的统一管理方式。&lt;/p&gt;

&lt;h3 id=&quot;统一一个依赖管理文件&quot;&gt;统一一个依赖管理文件&lt;/h3&gt;

&lt;p&gt;你要先自己创建一个config.gradle文件来统一管理你的依赖和其他系统版本这些参数，注意，这个文件不是属于某一个工程的，而是属于你个人或者公司的维护的文件，在你的工程中只是引用它。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Gradle&quot;&gt;ext {

    android = [compileSdkVersion: 23,
               buildToolsVersion: &quot;23.0.2&quot;,
               applicationId    : &quot;me.storm.ninegag&quot;,
               minSdkVersion    : 14,
               targetSdkVersion : 22,
               versionCode      : 2,
               versionName      : &quot;1.1.0&quot;]

    dependencies = [&quot;support-v4&quot;               : 'com.android.support:support-v4:23.1.1',
                    &quot;appcompat-v7&quot;             : 'com.android.support:appcompat-v7:23.1.1',
                    &quot;design&quot;                   : 'com.android.support:design:23.1.1',
                    &quot;cardview-v7&quot;              : 'com.android.support:cardview-v7:23.1.1',
                    &quot;recyclerview-v7&quot;          : 'com.android.support:recyclerview-v7:23.1.1',
                    &quot;multidex&quot;                 : &quot;com.android.support:multidex:1.0.+&quot;,
                    &quot;butterknife&quot;              : 'com.jakewharton:butterknife:7.0.1',
                    &quot;volley&quot;                   : 'com.mcxiaoke.volley:library:1.0.19',
                    &quot;okhttp&quot;                   : 'com.squareup.okhttp:okhttp:2.7.0',
                    &quot;okhttp-urlconnection&quot;     : 'com.squareup.okhttp:okhttp-urlconnection:2.7.0',
                    &quot;leakcanary&quot;               : 'com.squareup.leakcanary:leakcanary-android:1.3.1',
                    &quot;glide&quot;                    : 'com.github.bumptech.glide:glide:3.6.1',
                    &quot;glide-okhttp-integration&quot; : 'com.github.bumptech.glide:okhttp-integration:1.3.1',
                    &quot;foldable-layout&quot;          : 'com.alexvasilkov:foldable-layout:1.0.1',
                    &quot;etsy-grid&quot;                : 'com.etsy.android.grid:library:1.0.5']
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面是我的config.gradle文件，你们放你们需要的依赖以及配置其他的参数。&lt;/p&gt;

&lt;h3 id=&quot;如何引用&quot;&gt;如何引用？&lt;/h3&gt;

&lt;p&gt;如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-05-26/config.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;只需在最顶部加上上面一行代码，意思就是所有的子项目或者所有的modules都可以从这个配置文件里读取内容。&lt;/p&gt;

&lt;p&gt;最后在到app目录下的build.gradle文件里看下具体如何读取的呢？&lt;/p&gt;

&lt;p&gt;android节点下的读取：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-05-26/config_use1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;denpendencies节点下的读取：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-05-26/config_use2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考博客：&lt;a href=&quot;http://stormzhang.com/android/2016/03/13/gradle-config/&quot;&gt;Gradle依赖的统一管理&lt;/a&gt;&lt;/p&gt;</content><author><name>Yawei Wang</name></author></entry><entry><title type="html"></title><link href="https://pfcstyle.github.io/2021/02/06/2016-06-09-iOS-Project-Sumary1/" rel="alternate" type="text/html" title="" /><published>2021-02-06T17:29:40+08:00</published><updated>2021-02-06T17:29:40+08:00</updated><id>https://pfcstyle.github.io/2021/02/06/2016-06-09-iOS-Project-Sumary1</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/06/2016-06-09-iOS-Project-Sumary1/">&lt;blockquote&gt;
  &lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海；&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;之前就知道闷头写项目，在项目中解决了什么问题也不知道记录，现在很是后悔，如今来总结一下，希望能够回忆起一些。&lt;/p&gt;

&lt;h1 id=&quot;ios开发的本地存储主要有五种形式&quot;&gt;iOS开发的本地存储主要有五种形式&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;XML属性列表（plist)归档&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Preference(偏好设置NSUserDefaults)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NSKeyedArchiver归档(NSCoding)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SqlLite（本地数据库）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CoreData（苹果官方封装的SqlLite数据库操作接口）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述五种本地的存储方式在我们日常编码中都非常常用，本篇文章先介绍前三种，后两种请参考我的后续博文&lt;a href=&quot;http://pfcstyle.me/2016/06/10/iOS-Project-Sumary2/&quot;&gt;iOS项目总结(二)-iOS本地持久化总结2&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;应用沙盒&quot;&gt;应用沙盒&lt;/h1&gt;

&lt;p&gt;要想真正了解本地数据存储，你需要先了解什么是应用沙盒。我们都知道，iOS的各个应用的文件夹是对其他应用封闭的，也就是说它的文件系统是隔离的，而这每一个应用的数据文件夹就是应用沙盒。那么，如何获取应用沙盒的路径呢？可以通过打印NSHomeDirectory()来获取应用沙盒路径。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;test[15254:733802] 沙盒：/Users/developer/Library/Developer/CoreSimulator/Devices/0360A858-A0E7-45A7-AE71-09D7988C089F/data/Containers/Data/Application/2FB5B4BB-A097-411D-A8BA-6043155C171E
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里需要提醒大家注意的是，如果你是在调试，那么你每次从XCode运行应用，沙盒路径都会发生改变。我之前做项目有一个涉及到管理草稿的，当时在这个坑里跳了一整天才跳出来。。。当然，如果你的应用发布了，那么，沙盒路径就是固定不变的。&lt;/p&gt;

&lt;p&gt;接下来我们看一下沙盒的结构，Finder的快捷键shift+com+g可以前往任意路径&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2016-06-09/sandtable.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Documents:&lt;/strong&gt; 保存应用运行时生成的需要持久化的数据，iTunes同步设备时会备份该目录。例如，游戏应用可将游戏存档保存在该目录&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Library/Caches:&lt;/strong&gt; 保存应用运行时生成的需要持久化的数据，iTunes同步设备时不会备份该目录。一般存储体积大、不需要备份的非重要数据&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Library/Preference:&lt;/strong&gt; 保存应用的所有偏好设置，iOS的Settings(设置)应用会在该目录中查找应用的设置信息。iTunes同步设备时会备份该目录&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tmp:&lt;/strong&gt; 保存应用运行时所需的临时数据，使用完毕后再将相应的文件从该目录删除。应用没有运行时，系统也可能会清除该目录下的文件。iTunes同步设备时不会备份该目录&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;document文件夹获取&quot;&gt;Document文件夹获取&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objective-C&quot;&gt;// NSDocumentDirectory 要查找的文件 枚举
// NSUserDomainMask 代表从用户文件夹下找 枚举
// 最后的Yes代表返回完整路径，No是这样的形式:~/Documents
// 在iOS中，只有一个目录跟传入的参数匹配，所以这个集合里面只有一个元素
NSString *path = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0];
NSString *filePath = [path stringByAppendingPathComponent:@&quot;xxx.plist&quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他的文件夹路径的获取方式我就不一一介绍了。接下来正式说持久化方式&lt;/p&gt;

&lt;h1 id=&quot;xml属性列表plist归档&quot;&gt;XML属性列表(plist)归档&lt;/h1&gt;

&lt;p&gt;plist文件只能是数组、字典、数值、字符串、Bool值这几种类型，而根类型必须是数组或者字典。&lt;/p&gt;

&lt;h3 id=&quot;plist文件的归档&quot;&gt;plist文件的归档&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objective-C&quot;&gt;NSString *filePath = [path stringByAppendingPathComponent:@&quot;xxx.plist&quot;];
// 解档
NSArray *arr = [NSArray arrayWithContentsOfFile:filePath];
NSLog(@&quot;%@&quot;, arr);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;plist文件的解档&quot;&gt;plist文件的解档&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objective-C&quot;&gt;NSArray *arr = [[NSArray alloc] initWithObjects:@&quot;1&quot;, @&quot;2&quot;, nil];
// NSDocumentDirectory 要查找的文件
// NSUserDomainMask 代表从用户文件夹下找
// 在iOS中，只有一个目录跟传入的参数匹配，所以这个集合里面只有一个元素
NSString *path = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0];
NSString *filePath = [path stringByAppendingPathComponent:@&quot;xxx.plist&quot;];
[arr writeToFile:filePath atomically:YES];
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;preference偏好设置nsuserdefaults&quot;&gt;Preference(偏好设置NSUserDefaults)&lt;/h1&gt;

&lt;p&gt;OC中有一个NSUserDefaults的单例，它可以用来存储用户的偏好设置，例如：用户名，字体的大小，用户的一些设置等。&lt;/p&gt;

&lt;h3 id=&quot;保存用户偏好设置&quot;&gt;保存用户偏好设置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objective-C&quot;&gt;// 获取用户偏好设置对象
NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
// 保存用户偏好设置
[defaults setBool:self.one.isOn forKey:@&quot;one&quot;];
[defaults setBool:self.two.isOn forKey:@&quot;two&quot;];
// 注意：UserDefaults设置数据时，不是立即写入，而是根据时间戳定时地把缓存中的数据写入本地磁盘。所以调用了set方法之后数据有可能还没有写入磁盘应用程序就终止了。这应该是iOS7之前的问题
// 出现以上问题，可以通过调用synchornize方法强制写入
// 现在这个版本不用写也会马上写入 不过之前的版本不会
[defaults synchronize];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;读取用户偏好设置&quot;&gt;读取用户偏好设置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objective-C&quot;&gt;// 读取用户偏好设置
NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults]; 
self.one.on = [defaults boolForKey:@&quot;one&quot;];
self.two.on = [defaults boolForKey:@&quot;two&quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是要注意的是，userDefault支持的类型有限，无法直接归档自定义类型，只能是NSData、NSString、NSNumber、NSDate、NSArray、NSDictionary，所以如果你要归档自定义类型，要先转换成前面的类型才行。&lt;/p&gt;

&lt;h1 id=&quot;nskeyedarchiver归档nscoding&quot;&gt;NSKeyedArchiver归档(NSCoding)&lt;/h1&gt;

&lt;p&gt;只有遵守了NSCoding协议的类才可以用NSKeyedArchiver归档和NSKeyedUnarchiver解档，但如果如果对象是NSString、NSDictionary、NSArray、NSData、NSNumber等类型就不需要了。
下面举的是归档解档一个Account模型&lt;/p&gt;

&lt;h3 id=&quot;实现encodewithcoder和initwithcoder方法&quot;&gt;实现encodeWithCoder和initWithCoder方法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objective-C&quot;&gt;@implementation Account
- (void)encodeWithCoder:(NSCoder *)encoder
{
    [encoder encodeObject:_accessToken forKey:@&quot;accessToken&quot;];
    [encoder encodeObject:[NSString stringWithFormat:@&quot;%d&quot;, _userID] forKey:@&quot;user_id&quot;];
}

- (id)initWithCoder:(NSCoder *)decoder
{
    if (self = [super init]) {
        self.accessToken = [decoder decodeObjectForKey:@&quot;accessToken&quot;];
        self.userID = [[decoder decodeObjectForKey:@&quot;user_id&quot;] intValue];
    }
    return self;
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;归档&quot;&gt;归档&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objective-C&quot;&gt;_account = [[Account alloc] init];
_account.accessToken = @&quot;123456789&quot;;
_account.userID = 1;
[NSKeyedArchiver archiveRootObject:account toFile:kFilePath];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;解档&quot;&gt;解档&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objective-C&quot;&gt;_account = [NSKeyedUnarchiver unarchiveObjectWithFile:kFilePath];
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;userdefault和keyarchive结合&quot;&gt;UserDefault和KeyArchive结合&lt;/h1&gt;

&lt;h3 id=&quot;归档-1&quot;&gt;归档&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objective-C&quot;&gt;- (void)saveAccount:(Account *)account
{
_account = account;
NSData *data = [NSKeyedArchiver archivedDataWithRootObject:account];

NSUserDefaults *user = [NSUserDefaults standardUserDefaults];
[user setObject:data forKey:@&quot;kAccount&quot;];

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;解档-1&quot;&gt;解档&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Objective-C&quot;&gt;NSUserDefaults *user = [NSUserDefaults standardUserDefaults];

NSData *data = [user objectForKey:@&quot;kAccount&quot;];

_account = [NSKeyedUnarchiver unarchiveObjectWithData:data];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;嗯，是的，好吧 没有任何优点，反正就是能用userdefault存储了。。。。&lt;/p&gt;

&lt;p&gt;参考博文：&lt;a href=&quot;http://www.jianshu.com/p/cd475693e2f8&quot;&gt;iOS开发中本地数据存储的总结&lt;/a&gt;&lt;/p&gt;</content><author><name>Yawei Wang</name></author></entry></feed>