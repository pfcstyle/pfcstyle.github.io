<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://pfcstyle.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://pfcstyle.github.io/" rel="alternate" type="text/html" /><updated>2021-02-08T18:45:03+08:00</updated><id>https://pfcstyle.github.io/feed.xml</id><title type="html">01手记</title><subtitle>Will的个人手记</subtitle><author><name>Yawei Wang</name></author><entry><title type="html">kubernetes 教程（一）</title><link href="https://pfcstyle.github.io/2021/02/08/kubernetes-1-core-concept/" rel="alternate" type="text/html" title="kubernetes 教程（一）" /><published>2021-02-08T00:00:00+08:00</published><updated>2021-02-08T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/08/kubernetes-1-core-concept</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/08/kubernetes-1-core-concept/">&lt;h1 id=&quot;kubernetes能提供什么&quot;&gt;Kubernetes能提供什么&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;服务发现和负载均衡&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;存储编排&lt;/p&gt;

    &lt;p&gt;Kubernetes 允许你自动挂载你选择的存储系统，例如本地存储、公共云提供商等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;自动部署和回滚&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自动完成装箱计算&lt;/p&gt;

    &lt;p&gt;Kubernetes 允许你指定每个容器所需 CPU 和内存（RAM）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自我修复&lt;/p&gt;

    &lt;p&gt;Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的 运行状况检查的容器&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;密钥与配置管理&lt;/p&gt;

    &lt;p&gt;Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。 你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;kubernetes集群部署图&quot;&gt;Kubernetes集群部署图&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/2021-02-08/k8s-cluster-deploy.jpg&quot; alt=&quot;k8s-cluster-deploy&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pod：最小的调度分配单元，可包含一组容器和卷组成，同一个Pod的容器组共享同一个网络命名空间;&lt;/li&gt;
  &lt;li&gt;ReplicationController/ReplicateSet: 用于控制Pod副本数量，保证Pod始终运行;&lt;/li&gt;
  &lt;li&gt;StatefulSet：类似ReplicateSet，但StatefulSet提供Pod状态保持，在重新调度后保留他们的标识和状态，适合数据库等有状态应用场景;&lt;/li&gt;
  &lt;li&gt;DeamonSet： 保证在所有群集节点上运行一个Pod;&lt;/li&gt;
  &lt;li&gt;Service: 为一组功能相同的Pods提供单一不变的接入点，解耦Pods伸缩能力;&lt;/li&gt;
  &lt;li&gt;Deployment：类似ReplicationController/ReplicateSet， 增加滚动升降级策略和能力;&lt;/li&gt;
  &lt;li&gt;ConfigMap：配置选项，支持配置从Pod解耦分离;&lt;/li&gt;
  &lt;li&gt;Secret：类似ConfigMap，用于敏感数据保存;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;重要组件&quot;&gt;重要组件&lt;/h1&gt;

&lt;p&gt;集群中包含多个节点，分为主节点和工作节点。&lt;/p&gt;

&lt;p&gt;工作节点上用于负载应用的单元称为Pod,主节点用来管理工作节点和Pod.&lt;/p&gt;

&lt;h2 id=&quot;控制面板组件主节点&quot;&gt;控制面板组件（主节点）&lt;/h2&gt;
&lt;p&gt;对集群做出全局决策，以及检测和响应集群事件。每一个主节点同时也是node&lt;/p&gt;
&lt;h3 id=&quot;kube-apiserver&quot;&gt;kube-apiserver&lt;/h3&gt;
&lt;p&gt;Kubernetes的api服务，可以用来动态操作kubernetes，支持伸缩扩展。&lt;/p&gt;
&lt;h3 id=&quot;etcd&quot;&gt;etcd&lt;/h3&gt;
&lt;p&gt;保存Kubernetes集群数据的后台键值数据库&lt;/p&gt;
&lt;h3 id=&quot;kube-scheduler&quot;&gt;kube-scheduler&lt;/h3&gt;
&lt;p&gt;用来调度Pod及Pod的资源&lt;/p&gt;
&lt;h3 id=&quot;kube-controller-manager&quot;&gt;kube-controller-manager&lt;/h3&gt;
&lt;p&gt;每一个控制器应该是一个进程，但为了降低复杂性，他们被编译到一个应用中，并运行在一个进程中&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应。&lt;/li&gt;
  &lt;li&gt;副本控制器（Replication Controller）: 负责为系统中的每个副本控制器对象维护正确数量的 Pod。&lt;/li&gt;
  &lt;li&gt;端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)。&lt;/li&gt;
  &lt;li&gt;服务帐户和令牌控制器（Service Account &amp;amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌
    &lt;h3 id=&quot;cloud-controller-manager&quot;&gt;cloud-controller-manager&lt;/h3&gt;
    &lt;p&gt;用于链接管理云提供商的应用编程接口，本地集群不需要&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;节点控制器（Node Controller）: 用于在节点终止响应后检查云提供商以确定节点是否已被删除&lt;/li&gt;
  &lt;li&gt;路由控制器（Route Controller）: 用于在底层云基础架构中设置路由&lt;/li&gt;
  &lt;li&gt;服务控制器（Service Controller）: 用于创建、更新和删除云提供商负载均衡器&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;node组件&quot;&gt;Node组件&lt;/h2&gt;
&lt;h3 id=&quot;kubelet&quot;&gt;Kubelet&lt;/h3&gt;
&lt;p&gt;每个工作节点上的代理，通过接收PodSpecs来管理容器，并保证安全的运行在Pod中&lt;/p&gt;
&lt;h3 id=&quot;kube-proxy&quot;&gt;Kube-proxy&lt;/h3&gt;
&lt;p&gt;每个工作节点上运行的网络代理，维护节点网络规则&lt;/p&gt;
&lt;h3 id=&quot;container-runtime&quot;&gt;Container Runtime&lt;/h3&gt;
&lt;p&gt;负责运行容器的软件，如Docker、Containerd等任何实现Kubernetes CRI（容器运行环境接口）的容器软件&lt;/p&gt;

&lt;h2 id=&quot;插件&quot;&gt;插件&lt;/h2&gt;
&lt;p&gt;使用Kubernetes资源提供集群级别功能，其命名空间域属于kubu-system命名空间。常用插件：&lt;/p&gt;
&lt;h3 id=&quot;dns&quot;&gt;DNS&lt;/h3&gt;
&lt;p&gt;几乎所有Kubernetes集群都应该有集群DNS用于做域名服务&lt;/p&gt;
&lt;h3 id=&quot;仪表盘&quot;&gt;仪表盘&lt;/h3&gt;
&lt;p&gt;Kubernetes集群通用的、基于WEb的用户界面，可以管理集群&lt;/p&gt;
&lt;h3 id=&quot;容器资源监控&quot;&gt;容器资源监控&lt;/h3&gt;
&lt;h3 id=&quot;集群级别日志&quot;&gt;集群级别日志&lt;/h3&gt;</content><author><name>Yawei</name></author><category term="kubernetes" /><summary type="html">Kubernetes能提供什么 服务发现和负载均衡 存储编排</summary></entry><entry><title type="html">kubernetes 组件版本偏差策略</title><link href="https://pfcstyle.github.io/2021/02/08/kubernetes-components-version-strategy/" rel="alternate" type="text/html" title="kubernetes 组件版本偏差策略" /><published>2021-02-08T00:00:00+08:00</published><updated>2021-02-08T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/08/kubernetes-components-version-strategy</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/08/kubernetes-components-version-strategy/">&lt;h1 id=&quot;版本偏差&quot;&gt;版本偏差&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;多个 kube-apiserver 实例小版本号最多差1&lt;/li&gt;
  &lt;li&gt;kubelet 版本号不能高于 kube-apiserver，最多可以比 kube-apiserver 低两个小版本。&lt;/li&gt;
  &lt;li&gt;kube-controller-manager、kube-scheduler 和 cloud-controller-manager 版本不能高于 kube-apiserver 版本号&lt;/li&gt;
  &lt;li&gt;kubectl 可以比 kube-apiserver 高一个小版本，也可以低一个小版本。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;组件升级顺序&quot;&gt;组件升级顺序&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;kube-apiserver&lt;/li&gt;
  &lt;li&gt;kube-controller-manager、kube-scheduler 和 cloud-controller-manager&lt;/li&gt;
  &lt;li&gt;Kubelet&lt;/li&gt;
  &lt;li&gt;Kube-proxy&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yawei</name></author><category term="kubernetes" /><summary type="html">版本偏差</summary></entry><entry><title type="html">kubernetes Daemonset</title><link href="https://pfcstyle.github.io/2021/02/08/kubernetes-daemonset/" rel="alternate" type="text/html" title="kubernetes Daemonset" /><published>2021-02-08T00:00:00+08:00</published><updated>2021-02-08T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/08/kubernetes-daemonset</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/08/kubernetes-daemonset/">&lt;p&gt;守护进程集包含存储进程、日志收集进程、节点监控进程、和Pods管理（创建与回收）进程。&lt;/p&gt;

&lt;p&gt;DaemonSet可以只有一个，也可以根据不同的daemon划分为多个。这些进程都以Pods的形式运行&lt;/p&gt;

&lt;h2 id=&quot;spec&quot;&gt;Spec&lt;/h2&gt;
&lt;h3 id=&quot;必需字段&quot;&gt;必需字段&lt;/h3&gt;
&lt;p&gt;apiVersion, kind, metadata等通用字段&lt;/p&gt;

&lt;p&gt;template, 这是一个pod template,其配置与pod几乎完全一样，除了没有apiVersion和kind&lt;/p&gt;

&lt;p&gt;selector,1.8开始，必须指定来匹配template的label，否则会报错&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;matchLabels - 匹配template的label&lt;/li&gt;
  &lt;li&gt;matchExpressions - 通过指定key, values列表和关联key-value的操作，来构建更复杂的匹配&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;在指定的node上运行pods&quot;&gt;在指定的node上运行Pods&lt;/h3&gt;
&lt;p&gt;如果你指定一个.spec.template.spec.nodeSelector, 那么DaemonSet controller会在匹配的node上创建相关的Pods。如果指定spec.template.spec.affinity，那么会在亲和度匹配的node上创建Pods。如果什么都没有指定，那么将会在所有的node上创建。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;Spec Example&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DaemonSet&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fluentd-elasticsearch&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-system&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fluentd-logging&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fluentd-elasticsearch&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fluentd-elasticsearch&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tolerations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# this toleration is to have the daemonset runnable on master nodes&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# remove it if your masters can't run pods&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node-role.kubernetes.io/master&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;effect&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NoSchedule&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fluentd-elasticsearch&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;quay.io/fluentd_elasticsearch/fluentd:v2.5.2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;200Mi&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;100m&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;200Mi&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;varlog&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/log&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;varlibdockercontainers&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/lib/docker/containers&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;terminationGracePeriodSeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;varlog&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/log&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;varlibdockercontainers&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/lib/docker/containers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;daemon-pods如何调度&quot;&gt;Daemon Pods如何调度&lt;/h2&gt;
&lt;p&gt;一般情况下，pods由Kubernetes调度器调度，但是Daemon pods被DaemonSet controller创建并调度。这会导致两个问题：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;不一致的Pod表现：一般的Pods会以Pending的状态创建，但是DaemonSet pods不会&lt;/li&gt;
  &lt;li&gt;Pod preemption被默认的调度器控制。当抢占启用时，DaemonSet controller会做出调度决定，而不考虑pod的优先级和抢占逻辑
可以通过添加NodeAffinity项到DaemonSet Pods可以让其使用默认的调度器&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;nodeAffinity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodeSelectorTerms&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;matchFields&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;metadata.name&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;In&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;target-host-name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;另外，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node.kubernetes.io/unschedulable:NoSchedule&lt;/code&gt; &lt;strong&gt;toleration&lt;/strong&gt;会自动添加到DaemonSet Pods上，从而使默认的调度器忽略unschedulable的Nodes&lt;/p&gt;</content><author><name>Yawei</name></author><category term="kubernetes" /><summary type="html">守护进程集包含存储进程、日志收集进程、节点监控进程、和Pods管理（创建与回收）进程。</summary></entry><entry><title type="html">What’s the difference between @ObservedObject, @State, @Environment and @EnvironmentObject and @Binding?</title><link href="https://pfcstyle.github.io/2021/02/07/Diff-Of-SwiftUI-Property-Wrapper/" rel="alternate" type="text/html" title="What’s the difference between @ObservedObject, @State, @Environment and @EnvironmentObject and @Binding?" /><published>2021-02-07T00:00:00+08:00</published><updated>2021-02-07T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/07/Diff-Of-SwiftUI-Property-Wrapper</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/07/Diff-Of-SwiftUI-Property-Wrapper/">&lt;h2 id=&quot;state&quot;&gt;@State&lt;/h2&gt;

&lt;p&gt;只在view内部发生改变和使用，且是较为简单的数据类型。@State将变量的内存管理交给了SwiftUI。所有的view都是结构体，是标量，这意味着它们无法修改（只能重新赋值）。因此，当我们使用@State时， 我们将变量的控制权交给了SwiftUI，只要view存在，他就会一直在内存中存在。当变量发生改变时，SwiftUI也会自动重新加载。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;struct ContentView: View {
    @State private var score = 0
    init() {
        score = 1
    }
    // more code
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;binding&quot;&gt;@Binding&lt;/h2&gt;

&lt;p&gt;当需要读写祖先view的@State或@ObservableObject(可能其中某个属性)的属性时&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;
struct MyView: View {
    @State var isPresentingAlert = false

    var body: some View {
        Button(action: {
            self.isPresentingAlert = true
        }, label: {
            Text(&quot;Present an Alert&quot;)
        })
        .customAlert(isPresented: $isPresentingAlert) {
            CustomAlertView(title: Text(&quot;Alert!&quot;))
        }
    }}

struct CustomAlertView: View {
    let title: Text
    
    /// it needs read/write access to a State-
    /// wrapped property of an ancestor view
    @Binding var isBeingPresented: Bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swfit&quot;&gt;
struct MyView: View {

    /// it needs to provide read/write access of 
    /// one of its properties to a descendant view
    @State var isPresentingAlert = false

    var body: some View {
        Button(action: {
            self.isPresentingAlert = true
        }, label: {
            Text(&quot;Present an Alert&quot;)
        })
        .alert(isPresented: $isPresentingAlert) {
            Alert(title: Text(&quot;Alert!&quot;))
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;observedobject&quot;&gt;@ObservedObject&lt;/h2&gt;

&lt;p&gt;适用于自定义类型，具备多个属性和方法，或者需要跨view使用的情况。大部分情况和@State相同，只是结构更复杂。需要实现ObservableObject protocol，这意味着其内部的属性可以被SwiftUI binding. 大多数情况，我们直接使用@Published来声明内部属性，当然也可以使用combine框架实现自定义的Publisher&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;# 自己内部初始化
class MovieViewModel: ObservableObject {
    
    @Published var movies: [Movie] = [] // 1
    
    // more code
    
}


struct MoviesView: View {
    
    // 1
    @ObservedObject var viewModel = MovieViewModel()
    
    var body: some View {
        List(viewModel.movies) { movie in // 2
            HStack {
                VStack(alignment: .leading) {
                    Text(movie.title) // 3a
                        .font(.headline)
                    Text(movie.originalTitle) // 3b
                        .font(.subheadline)
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;# 外部初始化（view init时）

struct MyView: View {

    /// it is dependent on an object that can
    /// easily be passed to its initializer
    @ObservedObject var dessertFetcher: DessertFetcher

    var body: some View {
        List(dessertFetcher.desserts) {
            Text($0.name)
        }.onAppear {
            self.dessertFetcher.fetch()
        }
    }}

extension UIViewController {

    func observedObjectExampleTwo() -&amp;gt; UIViewController {
        let fetcher = DessertFetcher(preferences: .init(toleratesMint: false))
        let view = ObservedObjectExampleTwo(dessertFetcher: fetcher)
        let host = UIHostingController(rootView: view)
        return host
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;Warning: When you use a custom publisher to announce that your object has changed, this must happen on the main thread.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;environmentobject&quot;&gt;@EnvironmentObject&lt;/h2&gt;

&lt;p&gt;ObservedObject当需要跨view共享或者是内嵌很深的view需要但又不适合自己初始化时，需要使用@EnvironmentObject。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@EnvironmentObject只支持1个实例&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;
struct SomeChildView: View {

    /// it would be too cumbersome to pass that 
    /// observed object through all the initializers 
    /// of all your view's ancestors
    @EnvironmentObject var veggieFetcher: VegetableFetcher

    var body: some View {
        List(veggieFetcher.veggies) {
            Text($0.name)
        }.onAppear {
            self.veggieFetcher.fetch()
        }
    }}

struct SomeParentView: View {
    var body: some View {
        SomeChildView()
    }}

struct SomeGrandparentView: View {
    var body: some View {
        SomeParentView()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;environment&quot;&gt;@Environment&lt;/h2&gt;

&lt;p&gt;当view依赖的不能满足ObservableObject协议时，可能是以下几种情况：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;依赖的是一个值类型&lt;/li&gt;
  &lt;li&gt;依赖项仅作为协议而不是具体类型公开&lt;/li&gt;
  &lt;li&gt;依赖是一个闭包&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;@Environment 支持多实例
修改@Published的属性，不会引发view的重绘&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;
struct MyView: View {

    /// it is dependent on a type that cannot 
    /// conform to ObservableObject
    @Environment(\.theme) var theme: Theme

    var body: some View {
        Text(&quot;Me and my dad make models of clipper ships.&quot;)
            .foregroundColor(theme.foregroundColor)
            .background(theme.backgroundColor)
    }}

// MARK: - Dependencies

protocol Theme {
    var foregroundColor: Color { get }
    var backgroundColor: Color { get }
}

struct PinkTheme: Theme {
    var foregroundColor: Color { .white }
    var backgroundColor: Color { .pink }
}

// MARK: - Environment Boilerplate

struct ThemeKey: EnvironmentKey {
    static var defaultValue: Theme {
        return PinkTheme()
    }}

extension EnvironmentValues {
    var theme: Theme {
        get { return self[ThemeKey.self]  }
        set { self[ThemeKey.self] = newValue }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;workaround-for-multiple-instances-of-an-environmentobject&quot;&gt;Workaround for Multiple Instances of an EnvironmentObject&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;
struct MyView: View {

    @DistinctEnvironmentObject(\.posts) var postsService: Microservice
    @DistinctEnvironmentObject(\.users) var usersService: Microservice
    @DistinctEnvironmentObject(\.channels) var channelsService: Microservice

    var body: some View {
        Form {
            Section(header: Text(&quot;Posts&quot;)) {
                List(postsService.content, id: \.self) {
                    Text($0)
                }
            }
            Section(header: Text(&quot;Users&quot;)) {
                List(usersService.content, id: \.self) {
                    Text($0)
                }
            }
            Section(header: Text(&quot;Channels&quot;)) {
                List(channelsService.content, id: \.self) {
                    Text($0)
                }
            }
        }.onAppear(perform: fetchContent)
    }}

// MARK: - Property Wrapper To Make This All Work

@propertyWrapperstruct DistinctEnvironmentObject&amp;lt;Wrapped&amp;gt;: DynamicProperty where Wrapped : ObservableObject {
    var wrappedValue: Wrapped { _wrapped }
    @ObservedObject private var _wrapped: Wrapped

    init(_ keypath: KeyPath&amp;lt;EnvironmentValues, Wrapped&amp;gt;) {
        _wrapped = Environment&amp;lt;Wrapped&amp;gt;(keypath).wrappedValue
    }}

// MARK: - Wherever You Create Your View Hierarchy

MyView()
    .environment(\.posts, Microservice.posts)
    .environment(\.users, Microservice.users)
    .environment(\.channels, Microservice.channels)
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Yawei</name></author><category term="iOS," /><category term="Swift," /><category term="SwiftUI" /><summary type="html">@State</summary></entry><entry><title type="html">Effective presentations</title><link href="https://pfcstyle.github.io/2021/02/06/Effective-Presentations/" rel="alternate" type="text/html" title="Effective presentations" /><published>2021-02-06T00:00:00+08:00</published><updated>2021-02-06T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/06/Effective-Presentations</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/06/Effective-Presentations/">&lt;h1 id=&quot;progress&quot;&gt;progress&lt;/h1&gt;
&lt;h2 id=&quot;welcome-your-audience&quot;&gt;Welcome your audience&lt;/h2&gt;

&lt;p&gt;Good morning, everyone. Thanks for coming.&lt;/p&gt;

&lt;h2 id=&quot;tell-audience-some-interesting-abstract-information-or-statistic-to-get-peoples-attention&quot;&gt;Tell audience some interesting abstract information or statistic to get people’s attention.&lt;/h2&gt;

&lt;p&gt;I know that you’re all anxious to get more information about our acquisition of Sunset Computers.&lt;/p&gt;

&lt;h2 id=&quot;offer-people-a-map-of-your-presentation&quot;&gt;Offer people a ‘map’ of your presentation.&lt;/h2&gt;

&lt;p&gt;I’ll begin by giving a general update.&lt;/p&gt;

&lt;p&gt;Then, I’ll be discussing out acquisition of Smoot Hawley.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;-ing的形式听起来不太确定并且更加友好&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And I’m going to finish by talking about new projects.&lt;/p&gt;

&lt;p&gt;However, I won’t have any new financial information.&lt;/p&gt;

&lt;h2 id=&quot;give-your-audience-the-rules-for-questions&quot;&gt;Give your audience the rules for questions.&lt;/h2&gt;

&lt;p&gt;During my presentation, if you have questions, please just ask them at any time(or until the end).&lt;/p&gt;

&lt;h2 id=&quot;transitioning-to-the-next-point&quot;&gt;Transitioning to the next point&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;As you know&lt;/li&gt;
  &lt;li&gt;However&lt;/li&gt;
  &lt;li&gt;… which brings us to my next point&lt;/li&gt;
  &lt;li&gt;Best of all  首先&lt;/li&gt;
  &lt;li&gt;Worse yet 最糟糕的是&lt;/li&gt;
  &lt;li&gt;Now, I’d like to move on to；现在，我想转到。。。&lt;/li&gt;
  &lt;li&gt;These pie charts show…&lt;/li&gt;
  &lt;li&gt;As you can clearly see … 你可以清楚看到&lt;/li&gt;
  &lt;li&gt;I’d like to draw your attentions to …&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;concluding-a-presentation&quot;&gt;Concluding a presentation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;To summarize, we have a new CFO, sales are rising steadily and our merger with Smoot happens next month.&lt;/li&gt;
  &lt;li&gt;To conclusion, …&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ending-a-presentation&quot;&gt;Ending a presentation&lt;/h2&gt;

&lt;p&gt;Next steps for us all are to come up with ideas for improving morale. Email them to me.
我们所有人下面要做的是想出提高士气的主意。把它们用邮件发送给我。
I’ll take questions now.&lt;/p&gt;

&lt;p&gt;Are there any questions?
Any more questions?
Any other questions?&lt;/p&gt;

&lt;p&gt;If you think of other questions, just send me an email.&lt;/p&gt;

&lt;p&gt;Do you have any updates, Tom?&lt;/p&gt;

&lt;p&gt;Thank you all for coming today.&lt;/p&gt;</content><author><name>Yawei</name></author><category term="English" /><summary type="html">progress Welcome your audience</summary></entry><entry><title type="html">Future Technology</title><link href="https://pfcstyle.github.io/2021/02/05/Future-Technology/" rel="alternate" type="text/html" title="Future Technology" /><published>2021-02-05T00:00:00+08:00</published><updated>2021-02-05T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/05/Future-Technology</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/05/Future-Technology/">&lt;p&gt;Prof. Gilbert: Making use of this technology will &lt;strong&gt;instantly benefit&lt;/strong&gt; some of the poorest people on Earth. Drought-resistant crops will &lt;strong&gt;solve&lt;/strong&gt; the problem of hunger in the developing world.&lt;/p&gt;

&lt;p&gt;Prof. Gilbert: Fine-tuning the genes of mosquitos so that they spread vaccines instead of malaria will &lt;strong&gt;eliminate&lt;/strong&gt; many terrible diseases.&lt;/p&gt;

&lt;p&gt;Prof. Gilbert: And, closer to home, gene screening will &lt;strong&gt;enable&lt;/strong&gt; us to find and fix health problems before a person is even born.&lt;/p&gt;

&lt;p&gt;Prof. Gilbert: &lt;strong&gt;Who wouldn’t want the ability to prevent their child from developing cancer?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prof. Gilbert: Being able to change the DNA of plants, animals and ourseleves will &lt;strong&gt;trigger a chain reaction&lt;/strong&gt; of technological advancements, all of which will help us to &lt;strong&gt;overcome&lt;/strong&gt; the challenges the future will throw at us.&lt;/p&gt;

&lt;p&gt;A: But not all the experts are so optimistic.&lt;/p&gt;

&lt;p&gt;A: Professor Goldman, fro Queen’s College, is more cautionary.&lt;/p&gt;

&lt;p&gt;Prof. Goldman: This is &lt;strong&gt;untested technology&lt;/strong&gt;, and I’d &lt;strong&gt;warn against&lt;/strong&gt; &lt;strong&gt;taking a leap into&lt;/strong&gt; the unknown Manipulating DNA for our benefit really is ‘&lt;strong&gt;Playing God&lt;/strong&gt;’, and could &lt;strong&gt;come back to haunt us&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Prof. Goldman: Imagine we genetically engineer some crops and the changes &lt;strong&gt;lead to&lt;/strong&gt; undesirable results; those changes might be &lt;strong&gt;impossible to reverse&lt;/strong&gt;, and have a &lt;strong&gt;disastrous&lt;/strong&gt; effect on the environment.&lt;/p&gt;

&lt;p&gt;Prof. Goldman: It’s a &lt;strong&gt;slippery slope&lt;/strong&gt;, with &lt;strong&gt;serious consequences&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Prof. Goldman: Once we start making changes to human DNA, &lt;strong&gt;who knows what terrible results it could have on our health in the future?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prof. Goldman: We really shouldn’t be &lt;strong&gt;playing around&lt;/strong&gt; with technology we don’t fully understand yes.&lt;/p&gt;</content><author><name>Yawei</name></author><category term="English" /><summary type="html">Prof. Gilbert: Making use of this technology will instantly benefit some of the poorest people on Earth. Drought-resistant crops will solve the problem of hunger in the developing world.</summary></entry><entry><title type="html">Negotiating a better deal</title><link href="https://pfcstyle.github.io/2021/02/04/Negotiating-A-Better-Deal/" rel="alternate" type="text/html" title="Negotiating a better deal" /><published>2021-02-04T00:00:00+08:00</published><updated>2021-02-04T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/04/Negotiating-A-Better-Deal</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/04/Negotiating-A-Better-Deal/">&lt;ul&gt;
  &lt;li&gt;Target point: The Best result to make a deal.&lt;/li&gt;
  &lt;li&gt;Benchmark: The middle result to make a deal.&lt;/li&gt;
  &lt;li&gt;Resistance point: The worst result to make a deal.&lt;/li&gt;
  &lt;li&gt;Bargaining range: From resistance point to target point.&lt;/li&gt;
  &lt;li&gt;Interests: The foundamental reason of a negotiation.&lt;/li&gt;
  &lt;li&gt;Position: Current level.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yawei</name></author><category term="English" /><summary type="html">Target point: The Best result to make a deal. Benchmark: The middle result to make a deal. Resistance point: The worst result to make a deal. Bargaining range: From resistance point to target point. Interests: The foundamental reason of a negotiation. Position: Current level.</summary></entry><entry><title type="html">Describing our job skills</title><link href="https://pfcstyle.github.io/2021/02/03/Describing-Our-Job-Skills/" rel="alternate" type="text/html" title="Describing our job skills" /><published>2021-02-03T00:00:00+08:00</published><updated>2021-02-03T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/03/Describing-Our-Job-Skills</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/03/Describing-Our-Job-Skills/">&lt;h1 id=&quot;skills&quot;&gt;Skills&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;People skills&lt;/p&gt;

    &lt;p&gt;John is extremely likeable and he gets along well with his colleagues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Speaking skills&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Teamwork&lt;/p&gt;

    &lt;p&gt;He is happy to cooperate with others.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Writing skills&lt;/p&gt;

    &lt;p&gt;His reports are well organized and easy to understand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Budget management&lt;/p&gt;

    &lt;p&gt;He finishes his project without exceeding his budget.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Organization&lt;/p&gt;

    &lt;p&gt;He finishes his project without going beyond his spending limit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Creativity&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Problem solving&lt;/p&gt;

    &lt;p&gt;When things go wrong, he relies on his teammates to find the answers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stress management&lt;/p&gt;

    &lt;p&gt;He has difficulty working under pressure, and this can affect his work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;some-describes&quot;&gt;Some describes&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;You get along well with some of your colleague, but not all of them.&lt;/li&gt;
  &lt;li&gt;Being confident is something that comes naturally to you.&lt;/li&gt;
  &lt;li&gt;Your boss encourages you to think outside the box.&lt;/li&gt;
  &lt;li&gt;You don’t usually take the initiative at work: you wait for the boss to tell you what to do.&lt;/li&gt;
  &lt;li&gt;You need to become more efficient in your work.&lt;/li&gt;
  &lt;li&gt;You have a skill that give you the ability to communicate effectively.&lt;/li&gt;
  &lt;li&gt;You can cooperate with others, but you don’t like to rely on them.&lt;/li&gt;
  &lt;li&gt;I am trying to stay up to date with the latest developments in my field.&lt;/li&gt;
  &lt;li&gt;I’m behind on answering my emails, now I’m trying to get up to date.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yawei</name></author><category term="English" /><summary type="html">Skills</summary></entry><entry><title type="html">Talking about career paths</title><link href="https://pfcstyle.github.io/2021/02/02/Talking-about-career-paths/" rel="alternate" type="text/html" title="Talking about career paths" /><published>2021-02-02T00:00:00+08:00</published><updated>2021-02-02T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/02/Talking-about-career-paths</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/02/Talking-about-career-paths/">&lt;ol&gt;
  &lt;li&gt;Mark: Hey, Jane! Can I ask you a question?&lt;/li&gt;
  &lt;li&gt;Jane: Sure, What’s up?&lt;/li&gt;
  &lt;li&gt;Mark: Well, I’m going to be graduating soon, so I’ll be applying for jobs, but I’m not sure which jobs to choose. My parents say I should choose the company that pays the most but …&lt;/li&gt;
  &lt;li&gt;Jane: But your’re worried that &lt;strong&gt;you’re going to end up with a boss you hate?&lt;/strong&gt;
    &lt;blockquote&gt;
      &lt;p&gt;you’re going to get the result in the end with…&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Mark: Yeah! Do you have any suggestions?&lt;/li&gt;
  &lt;li&gt;Jane: Sure. Several things to &lt;strong&gt;keep in mind&lt;/strong&gt;. First, do some research about the company. What are the chances that you’ll get a promotion if you &lt;strong&gt;stay with the company long-term&lt;/strong&gt;? Also, where’s the company located? How long will the &lt;strong&gt;commute&lt;/strong&gt; be? And of course the salary is important. &lt;strong&gt;Rather than&lt;/strong&gt; thinking about which company pays the most &lt;strong&gt;though&lt;/strong&gt;, find out which company pays you enough to live the life you want to live. However, &lt;strong&gt;none of this guarantees(there’s no promise)&lt;/strong&gt; that you’re going to like your boss, but at least you’ll like everything else about the job if that happens.&lt;/li&gt;
  &lt;li&gt;Mark: Wow! &lt;strong&gt;You’ve given me a lot to think about.&lt;/strong&gt; Thanks!&lt;/li&gt;
  &lt;li&gt;Jane: Glad I could be of help!&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yawei</name></author><category term="English" /><summary type="html">Mark: Hey, Jane! Can I ask you a question? Jane: Sure, What’s up? Mark: Well, I’m going to be graduating soon, so I’ll be applying for jobs, but I’m not sure which jobs to choose. My parents say I should choose the company that pays the most but … Jane: But your’re worried that you’re going to end up with a boss you hate? you’re going to get the result in the end with… Mark: Yeah! Do you have any suggestions? Jane: Sure. Several things to keep in mind. First, do some research about the company. What are the chances that you’ll get a promotion if you stay with the company long-term? Also, where’s the company located? How long will the commute be? And of course the salary is important. Rather than thinking about which company pays the most though, find out which company pays you enough to live the life you want to live. However, none of this guarantees(there’s no promise) that you’re going to like your boss, but at least you’ll like everything else about the job if that happens. Mark: Wow! You’ve given me a lot to think about. Thanks! Jane: Glad I could be of help!</summary></entry><entry><title type="html">Ansible 快速入门</title><link href="https://pfcstyle.github.io/2020/12/28/ansible-base/" rel="alternate" type="text/html" title="Ansible 快速入门" /><published>2020-12-28T00:00:00+08:00</published><updated>2020-12-28T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2020/12/28/ansible-base</id><content type="html" xml:base="https://pfcstyle.github.io/2020/12/28/ansible-base/">&lt;h1 id=&quot;是什么&quot;&gt;是什么&lt;/h1&gt;
&lt;p&gt;Python的一套自动化工具库&lt;/p&gt;

&lt;h1 id=&quot;组成&quot;&gt;组成&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Ansible
核心命令执行工具&lt;/li&gt;
  &lt;li&gt;Ansible Playbook
任务剧本（又称任务集），具有编排能力的配置文件集合，yaml&lt;/li&gt;
  &lt;li&gt;Inventory
管理的主机清单，默认/etc/ansible/hosts文件&lt;/li&gt;
  &lt;li&gt;Modules
功能模块，支持自定义&lt;/li&gt;
  &lt;li&gt;Plugins
模块功能的补充，常有连接类型插件，循环插件，变量插件，过滤插件等&lt;/li&gt;
  &lt;li&gt;API
提供给第三方调用的应用程序接口&lt;/li&gt;
  &lt;li&gt;custom modules
自定义模块&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;安装与配置&quot;&gt;安装与配置&lt;/h1&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ansible &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
ansible &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;ansible配置文件优先级&quot;&gt;ansible配置文件优先级&lt;/h2&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 由上到下, 优先级逐渐降低&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ANSIBLE_CONFIG&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#环境变量&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ansible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#项目目录&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ansible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#当前用户的家目录&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ansible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ansible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#默认配置文件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;配置文件详解&quot;&gt;配置文件详解&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#inventory      = /etc/ansible/hosts      #主机列表配置文件
#library        = /usr/share/my_modules/  #库文件存放目录
#remote_tmp     = ~/.ansible/tmp          #临时py文件存放在远程主机目录
#local_tmp      = ~/.ansible/tmp          #本机的临时执行目录
#forks          = 5                       #默认并发数
#sudo_user      = root                    #默认sudo用户
#ask_sudo_pass = True                     #每次执行是否询问sudo的ssh密码
#ask_pass      = True                     #每次执行是否询问ssh密码
#remote_port    = 22                      #远程主机端口
host_key_checking = False                 #跳过检查主机指纹
log_path = /var/log/ansible.log           #ansible日志
[privilege_escalation]   #如果是普通用户则需要配置提权
#become=True
#become_method=sudo
#become_user=root
#become_ask_pass=False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ansible-inventory&quot;&gt;Ansible inventory&lt;/h2&gt;

&lt;p&gt;/etc/ansible/hosts是默认主机资产清单文件，用于定义被管理主机的认证信息， 例如ssh登录用户名、密码以及key相关信息。
我们可以在执行ansible命令时，动态指定inventory文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible web1 -m ping -i inventory.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;如何配置inventory文件&quot;&gt;如何配置Inventory文件&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;主机支持主机名通配以及正则表达式，例如web[1:3].test.com代表三台主机&lt;/li&gt;
  &lt;li&gt;主机支持基于非标准的ssh端口，例如web1.test.com:6666&lt;/li&gt;
  &lt;li&gt;主机支持指定变量，可对个别主机的特殊配置，如登陆用户，密码&lt;/li&gt;
  &lt;li&gt;主机组支持指定变量[group_name:vars]，同时支持嵌套组[game:children]
    &lt;h4 id=&quot;场景一基于密码连接&quot;&gt;场景一、基于密码连接&lt;/h4&gt;
    &lt;p&gt;```bash
cat /etc/ansible/hosts&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;#方式一、主机+端口+密码
[webservers]
10.0.0.31 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=’123456’
10.0.0.41 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=’123456’&lt;/p&gt;

&lt;p&gt;#方式二、主机+端口+密码
[webservers]
web[1:2].yuntaoshu.com ansible_ssh_pass=’123456’&lt;/p&gt;

&lt;p&gt;#方式三、主机+端口+密码
[webservers]
web[1:2].yutaoshu.com
[webservers:vars]
ansible_ssh_pass=’123456’&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#### 场景二、基于密钥连接，需要先创建公钥和私钥，并下发公钥至被控端
```bash
#利用非交换式工具实现批量分发公钥与批量管理服务器
ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.41
ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.31

#方式一、主机+端口+密钥
[group_name]
10.0.0.31:22
10.0.0.41

#方式二、别名+主机+端口+密钥
[group_name]
nfs-node1 ansible_ssh_host=10.0.0.31 ansible_ssh_port=22
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;场景三主机组使用方式&quot;&gt;场景三、主机组使用方式&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#方式一、主机组变量+主机+密码&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;group_name1]
10.0.0.31
10.0.0.41
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;group_name1:vars]
&lt;span class=&quot;nv&quot;&gt;ansible_ssh_pass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'123456'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#方式二、主机组变量+主机+密钥&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;group_name2]
10.0.0.7
10.0.0.8

&lt;span class=&quot;c&quot;&gt;#定义多组，多组汇总整合&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#webservers组包括两个子组[apapche,nginx]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;webservers:children]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;group_name1]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;group_name2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;查看主机清单&quot;&gt;查看主机清单&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#查看所有
[root@m01 ~]# ansible all --list-hosts
  hosts (1):
    172.16.1.7
#查看某个组内的主机数
[root@client ~]# ansible web --list-hosts
  hosts (1):
    172.16.1.7
#查看非默认配置主机清单的
[root@m01 /project1]# ansible web -i hosts --list-hosts
  hosts (1):
    172.16.1.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;inventory内置参数&quot;&gt;inventory内置参数&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/2020-12-28/inventory.jpg&quot; alt=&quot;inventory&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;被控端首次连接容易出现问题&quot;&gt;被控端首次连接容易出现问题&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;解决方案1
如果控制端和被控制端第一次通讯，需要确认指纹信息，如果机器特别多少的情况下怎么办？
将 Ansible 配置文件中的 host_key_checking = False 参数注释打开即可。
但要注意ansible.cfg文件的读取顺序。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解决方案2
通过脚本来实现
```
[root@ansible ~]# vim /server/scripts/fenfa.sh
#!/bin/bash&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;if [ -f /root/.ssh/id_rsa ];then
   echo “———-密钥对已经存在—————”
else
   echo “———-正在生成密钥对—————”
   ssh-keygen -f /root/.ssh/id_rsa -N ‘’ &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
fi&lt;/p&gt;

&lt;p&gt;for i in {5,6,7,8,9,31,41,51,52}
do
    echo “正在操作：172.16.1.${i}”
    echo “———-正在分发——–”
    sshpass -p123456 ssh-copy-id -i /root/.ssh/id_rsa.pub 172.16.1.${i} -o StrictHostKeyChecking=no &amp;gt; /tmp/ssh
.log 2&amp;gt;&amp;amp;1
done&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## Ansible Ad-Hoc
### 什么是ad-hoc模式
&amp;gt;ad-hoc简而言之，就是“临时命令”，不会保存
&amp;gt;ansible中有两种模式, 分别是ad-hoc模式和playbook模式

### ad-hoc模式的使用场景
&amp;gt;场景一，在多台机器上，查看某个进程是否启动
&amp;gt;场景二，在多台机器上，拷贝指定日志文件到本地，等等

### ad-hoc模式的命令使用
![ansible-ad-hoc](/img/post/2020-12-28/ansible-ad-hoc.jpg)

### ad-hoc模式的常用模块
* Ansible执行返回-&amp;gt;颜色信息说明
&amp;gt;黄色：对远程节点进行相应修改
&amp;gt;绿色：对远程节点不进行相应修改，或者只是对远程节点信息进行查看
&amp;gt;红色：操作执行命令有异常
&amp;gt;紫色：表示对命令执行发出警告信息（可能存在的问题，给你一下建议）

1. command命令模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;#默认模块, 执行命令
[root@m01 ~]# ansible test  -a “hostname”&lt;/p&gt;

&lt;p&gt;#如果需要一些管道操作，则使用shell
[root@m01 ~]# ansible test -m shell -a “ifconfig|grep eth0” -f 50&lt;/p&gt;

&lt;p&gt;-f = /etc/ansible/ansible.cfg中forks配置 #结果返回的数量&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2. script脚本模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;#编写脚本
[root@m01 ~]# mkdir -p /server/scripts
[root@m01 ~]# cat /server/scripts/yum.sh
#!/usr/bin/bash
yum install -y iftop&lt;/p&gt;

&lt;p&gt;#在本地运行模块，等同于在远程执行，不需要将脚本文件进行推送目标主机执行
[root@m01 ~]# ansible test -m script -a “/server/scripts/yum.sh”&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
3. yum安装软件模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;[root@m01 ~]# ansible test -m yum -a “name=httpd state=installed”
name        #指定要安装的软件包名称
state       #指定使用yum的方法
    installed，present   #安装软件包
    removed，absent      #移除软件包
    latest              #安装最新软件包&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
4. copy文件拷贝模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;#推送文件模块
[root@m01 ~]# ansible test -m copy -a “src=/etc/hosts dest=/tmp/test.txt”&lt;/p&gt;

&lt;p&gt;#在推送覆盖远程端文件前，对远端已有文件进行备份，按照时间信息备份
[root@m01 ~]# ansible test -m copy -a “src=/etc/hosts dest=/tmp/test.txt backup=yes”&lt;/p&gt;

&lt;p&gt;#直接向远端文件内写入数据信息，并且会覆盖远端文件内原有数据信息
[root@m01 ~]# ansible test -m copy -a “content=’bgx’ dest=/tmp/test”
src             #推送数据的源文件信息
dest            #推送数据的目标路径
backup          #对推送传输过去的文件，进行备份
content         #直接批量在被管理端文件中添加内容
group           #将本地文件推送到远端，指定文件属组信息
owner           #将本地文件推送到远端，指定文件属主信息
mode            #将本地文件推送到远端，指定文件权限信息&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
5. file文件配置模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;[root@m01 ~]# ansible test -m file -a “path=/tmp/oldboy state=directory”
[root@m01 ~]# ansible test -m file -a “path=/tmp/tt state=touch mode=555 owner=root group=root”
[root@m01 ~]# ansible test -m file -a “src=/tmp/tt path=/tmp/tt_link state=link”&lt;/p&gt;

&lt;p&gt;path            #指定远程主机目录或文件信息
recurse         #递归授权
state 
    directory   #在远端创建目录
    touch       #在远端创建文件
    link        #link或hard表示创建链接文件
    absent      #表示删除文件或目录
    mode        #设置文件或目录权限
    owner       #设置文件或目录属主信息
    group       #设置文件或目录属组信息&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
6. service服务模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;[root@m01 ~]# ansible test -m service -a “name=crond state=stopped enabled=yes”&lt;/p&gt;

&lt;p&gt;name        # 定义要启动服务的名称
state       # 指定服务状态
    started     #启动服务
    stopped     #停止服务
    restarted   #重启服务
    reloaded    #重载服务
enabled         #开机自启&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
7. group组模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;[root@m01 ~]# ansible test -m group -a “name=oldgirl gid=888”&lt;/p&gt;

&lt;p&gt;name            #指定创建的组名
gid             #指定组的gid
state
    absent      #移除远端主机的组
    present     #创建远端主机的组（默认）&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
8. user模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;#创建用户指定uid和gid，不创建家目录也不允许登陆
[root@m01 ~]# ansible test -m user -a “name=oldgirl uid=888 group=888 shell=/sbin/nologin create_home=no”&lt;/p&gt;

&lt;p&gt;#将明文密码进行hash加密，然后进行用户创建
[root@m01 ~]# ansible localhost -m debug -a “msg=bgx”
localhost | SUCCESS =&amp;gt; {
    “msg”: “$6$salt$WP.Kb1hMfqJG7dtlBltkj4Um4rVhch54R5JCi6oP73MXzGhDWqqIY.JkSOnIsBSOeXpKglY7gUhHzY4ZtySm41”
}
[root@m01 ~]# ansible test -m user -a ‘name=xlw password=$6$salt$WP.Kb1hMfqJG7dtlBltkj4Um4rVhch54R5JCi6oP73MXzGhDWqqIY.JkSOnIsBSOeXpKglY7gUhHzY4ZtySm41 create_home=yes shell=/bin/bash’&lt;/p&gt;

&lt;p&gt;uid             #指定用户的uid
group           #指定用户组名称
groups          #指定附加组名称
password        #给用户添加密码
shell           #指定用户登录shell
create_home     #是否创建家目录&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
8.crond定时任务模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;#正常使用crond服务
[root@m01 ~]# crontab -l&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;ul&gt;
                  &lt;li&gt;/bin/sh /server/scripts/yum.sh&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#使用ansible添加一条定时任务
[root@m01 ~]# ansible test -m cron -a “minute=* hour=* day=* month=* weekday=*  job=’/bin/sh /server/scripts/test.sh’”
[root@m01 ~]# ansible test -m cron -a “job=’/bin/sh /server/scripts/test.sh’”&lt;/p&gt;

&lt;h1 id=&quot;设置定时任务注释信息防止重复name设定&quot;&gt;设置定时任务注释信息，防止重复，name设定&lt;/h1&gt;
&lt;p&gt;[root@m01 ~]# ansible test -m cron -a “name=’cron01’ job=’/bin/sh /server/scripts/test.sh’”&lt;/p&gt;

&lt;h1 id=&quot;删除相应定时任务&quot;&gt;删除相应定时任务&lt;/h1&gt;
&lt;p&gt;[root@m01 ~]# ansible test -m cron -a “name=’ansible cron02’ minute=0 hour=0 job=’/bin/sh /server/scripts/test.sh’ state=absent”&lt;/p&gt;

&lt;h1 id=&quot;注释相应定时任务使定时任务失效&quot;&gt;注释相应定时任务，使定时任务失效&lt;/h1&gt;
&lt;p&gt;[root@m01 scripts]# ansible test -m cron -a “name=’ansible cron01’ minute=0 hour=0 job=’/bin/sh /server/scripts/test.sh’ disabled=no”&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
9. mount模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;[root@m01 ~]# ansible test -m mount -a “src=172.16.1.31:/data path=/data fstype=nfs opts=defaults state=present”
[root@m01 ~]# ansible web -m mount -a “src=172.16.1.31:/data path=/data fstype=nfs opts=defaults state=mounted”
[root@m01 ~]# ansible web -m mount -a “src=172.16.1.31:/data path=/data fstype=nfs opts=defaults state=unmounted”
[root@m01 ~]# ansible web -m mount -a “src=172.16.1.31:/data path=/data fstype=nfs opts=defaults state=absent”&lt;/p&gt;

&lt;p&gt;present     # 开机挂载，仅将挂载配置写入/etc/fstab
mounted     # 挂载设备，并将配置写入/etc/fstab
unmounted   # 卸载设备，不会清除/etc/fstab写入的配置
absent      # 卸载设备，会清理/etc/fstab写入的配置&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
10.setup用于获取系统信息的一个模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;查看模块参数&quot;&gt;查看模块参数&lt;/h1&gt;
&lt;p&gt;[root@m01 ~]# ansible-doc -s setup&lt;/p&gt;

&lt;h1 id=&quot;查看系统所有信息&quot;&gt;查看系统所有信息&lt;/h1&gt;
&lt;p&gt;[root@m01 ~]# ansible 192.16 1.31-m setup&lt;/p&gt;

&lt;h1 id=&quot;filter-对系统信息进行过滤&quot;&gt;filter 对系统信息进行过滤&lt;/h1&gt;
&lt;p&gt;[root@m01 ~]# ansible 192.168.1.31 -m setup -a ‘filter=ansible_all_ipv4_addresses’ # 常用的过滤选项
ansible_all_ipv4_addresses         所有的ipv4地址
ansible_all_ipv6_addresses         所有的ipv6地址
ansible_architecture               系统的架构
ansible_date_time                  系统时间
ansible_default_ipv4               系统的默认ipv4地址
ansible_distribution               系统名称
ansible_distribution_file_variety  系统的家族
ansible_distribution_major_version 系统的版本
ansible_domain                     系统所在的域
ansible_fqdn                       系统的主机名
ansible_hostname                   系统的主机名,简写
ansible_os_family                  系统的家族
ansible_processor_cores            cpu的核数
ansible_processor_count            cpu的颗数
ansible_processor_vcpus            cpu的个数&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
11. unarchive解压模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;01.解压远程服务器的压缩包到指定目录
创建压缩包：&lt;/p&gt;

&lt;p&gt;cd /etc &amp;amp;&amp;amp; tar zxvf /opt/sys.tar.gz etc/fstab etc/hosts&lt;br /&gt;
执行命令：&lt;/p&gt;

&lt;p&gt;[root@m01 ~]# ansible 172.16.1.31 -m unarchive -a “src=/opt/sys.tar.gz dest=/opt/ remote_src=yes”
02.把本地文件解压到目标机器指定目录
创建命令&lt;/p&gt;

&lt;p&gt;cd / &amp;amp;&amp;amp; tar zcvf /opt/log.tar.gz var/log/messages
[root@m01 ~]# ansible 172.16.1.31 -m unarchive -a “src=/opt/log.tar.gz dest=/opt/”&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
12. archive压缩模块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;01.压缩单个文件&lt;/p&gt;

&lt;p&gt;[root@m01 ~]# ansible 172.16.1.31 -m archive -a “path=/var/log/message dest=/tmp/log.tar.gz format=gz force_archi&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
13. ansible查看帮助方法
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;[root@m01 ~]# ansible-doc -l    — 查看所有模块说明信息
[root@m01 ~]# ansible-doc copy  — 表示指定查看某个模块参数用法信息
```&lt;/p&gt;</content><author><name>Yawei</name></author><category term="ansible" /><summary type="html">是什么 Python的一套自动化工具库</summary></entry></feed>