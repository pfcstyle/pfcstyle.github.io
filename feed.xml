<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://pfcstyle.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://pfcstyle.github.io/" rel="alternate" type="text/html" /><updated>2021-03-09T15:14:13+08:00</updated><id>https://pfcstyle.github.io/feed.xml</id><title type="html">01手记</title><subtitle>Will的个人手记</subtitle><author><name>Yawei Wang</name></author><entry><title type="html">Re-Add storyboard</title><link href="https://pfcstyle.github.io/2021/03/08/readd-storyboard/" rel="alternate" type="text/html" title="Re-Add storyboard" /><published>2021-03-08T00:00:00+08:00</published><updated>2021-03-08T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/03/08/readd-storyboard</id><content type="html" xml:base="https://pfcstyle.github.io/2021/03/08/readd-storyboard/">&lt;ol&gt;
  &lt;li&gt;AppDelegate可以什么逻辑都没有&lt;/li&gt;
  &lt;li&gt;SceneDelegate可以什么相关逻辑都没有&lt;/li&gt;
  &lt;li&gt;Info.plist
&lt;img src=&quot;../img/post/2021-03-08/main.storyboard.jpg&quot; alt=&quot;info.plist&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Storyboard设置
&lt;img src=&quot;../img/post/2021-03-08/viewcontroller.jpg&quot; alt=&quot;viewcontroller&quot; /&gt;
&lt;img src=&quot;../img/post/2021-03-08/entrypoint.jpg&quot; alt=&quot;entrypoint&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yawei</name></author><category term="iOS" /><category term="Swift" /><summary type="html">AppDelegate可以什么逻辑都没有 SceneDelegate可以什么相关逻辑都没有 Info.plist Storyboard设置</summary></entry><entry><title type="html">Swift Type-Erasure(类型抹除)</title><link href="https://pfcstyle.github.io/2021/02/28/swift-type-erased/" rel="alternate" type="text/html" title="Swift Type-Erasure(类型抹除)" /><published>2021-02-28T00:00:00+08:00</published><updated>2021-02-28T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/28/swift-type-erased</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/28/swift-type-erased/">&lt;h1 id=&quot;什么是type-erasure&quot;&gt;什么是Type-Erasure&lt;/h1&gt;

&lt;p&gt;swift中在引用一些通用协议时，往往需要用到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type erasure&lt;/code&gt;。它使我们能够更轻松地与通用协议进行交互，这些通用协议对将要实现它们的各种类型具有特定的要求。&lt;/p&gt;

&lt;p&gt;常见的：&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;AnyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// 当然，5.1之后有更简单的写法(Opaque return types)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;实例&quot;&gt;实例&lt;/h1&gt;
&lt;p&gt;以Equatable标准库中的协议为例。由于都是为了使相等类型的两个值能够按相等性进行比较，因此它使用元Self类型作为其唯一方法要求的参数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;protocol Equatable {
    static func ==(lhs: Self, rhs: Self) -&amp;gt; Bool
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种方法的优点在于，它不可能意外地比较两个不相关的相等类型（例如User和String），但是，它也使得它不可能被引用Equatable为独立协议（例如创建类似的数组[Equatable]），因为为了能够使用它，编译器需要知道确切的确切类型实际上符合该协议。&lt;/p&gt;

&lt;p&gt;当协议包含关联类型时，也是如此。例如，在这里我们定义了一个Request协议，使我们能够在单个统一的实现后隐藏各种形式的数据请求（例如网络调用，数据库查询和缓存提取）：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;associatedtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;associatedtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的方法为我们提供了相同的权衡方法，Equatable它非常强大，因为它使我们能够为任何类型的请求创建通用的抽象，但是这也使得无法直接引用Request协议本身，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RequestQueue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Error: protocol 'Request' can only be used as a generic&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// constraint because it has Self or associated type requirements&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决上述问题的一种方法是准确执行错误消息中所说的内容，而不是Request直接引用，而是将其用作一般约束：&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RequestQueue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的方法起作用了，因为现在编译器能够保证传递handler的确实与Request传递的实现兼容request—因为它们都基于泛型R，而泛型又被限制为与一致Request。&lt;/p&gt;

&lt;p&gt;但是，尽管我们解决了方法签名问题，但实际上仍然无法对传递的请求做很多工作，因为我们无法将其存储为Request属性或[Request]数组的一部分，这将使得继续建立RequestQueue。那么，type-erasure该出场了。&lt;/p&gt;

&lt;h2 id=&quot;通用包装器类型&quot;&gt;通用包装器类型&lt;/h2&gt;

&lt;p&gt;我们将探讨的第一种类型擦除实际上并不涉及擦除任何类型，而是将它们包装在一个我们可以更容易引用的泛型类型中。继续构建RequestQueue，我们将首先创建该包装器类型，该包装器类型将捕获每个请求的perform方法作为闭包，以及在请求完成后应调用的handler方法：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// This will let us wrap a Request protocol implementation in a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// generic has the same Response and Error types as the protocol.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来，实现RequestQueue，为其添加Response和Error类型的泛型，这样编译器可以将泛型类型和associatetype对齐，从而允许我们对Request存储和引用。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个实现时线程不安全的，我们只用来说明类型抹除的问题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RequestQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TypeErasedRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TypeErasedRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ongoing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TypeErasedRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// We modify our 'add' method to include a 'where' clause that&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// gives us a guarantee that the passed request's associated&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// types match our queue's generic types.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Handler&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// To perform our type erasure, we simply create an instance&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// of 'AnyRequest' and pass it the underlying request's&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 'perform' method as a closure, along with the handler.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;typeErased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Since we're implementing a queue, we don't want to perform&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// two requests at once, but rather save the request for&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// later in case there's already an ongoing one.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ongoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeErased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeErased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TypeErasedRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ongoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ongoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Perform the next request if the queue isn't empty&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;闭包实现&quot;&gt;闭包实现&lt;/h2&gt;

&lt;p&gt;使用闭包擦除类型时，其思想是捕获在闭包内部执行操作所需的所有类型信息，并使闭包仅接受非通用（甚至Void）输入。这样一来，我们就可以引用，存储和传递该功能，而无需实际知道其内部发生了什么—从而为我们提供了更大的灵活性。当然，这样实现会让代码变得难以调试，但优点是方便，而且可以完全封装类型信息。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RequestQueue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isPerformingRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This closure will capture both the request and its&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// handler, without exposing any of that type information&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// outside of it, providing full type erasure.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;typeErased&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPerformingRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;performNextIfNeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeErased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;performNextIfNeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performNextIfNeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPerformingRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;isPerformingRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeFirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;外部类型抹除&quot;&gt;外部类型抹除&lt;/h2&gt;
&lt;p&gt;目前，我们都是在内部实现类型抹除，外部调用者不会关心到这个问题。但是，有时在将协议实现传递给API之前进行一些轻量级转换，可以简化更多工作，而且可以更整齐的封装抹除代码。&lt;/p&gt;

&lt;p&gt;对我们这个例子来说，可以要求每一个request在添加到队列之前进行专门化管理，这就衍变出了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RequestOperation&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RequestOperation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;fileprivate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;类似于闭包实现，我们将其放在extension中&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RequestOperation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RequestOperation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finisher&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// We actually want to capture 'self' here, since otherwise&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// we risk not retaining the underlying request anywhere.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;finisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么，我们的RequestQueue就可以更加专注于队列的实现，不用关心类型擦除了：&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RequestQueue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RequestOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ongoing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RequestOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Since the type erasure now happens before a request is&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// passed to the queue, it can simply accept a concrete&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// instance of 'RequestOperation'.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RequestOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ongoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RequestOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ongoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ongoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Perform the next request if the queue isn't empty&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然，在调用RequestQueue时，就要求我们手动将Request转换为RequestOption了。&lt;/p&gt;</content><author><name>Yawei</name></author><category term="iOS" /><category term="Swift" /><summary type="html">什么是Type-Erasure</summary></entry><entry><title type="html">SwiftUI布局基础</title><link href="https://pfcstyle.github.io/2021/02/26/iOS-swiftui-layout-base-rule/" rel="alternate" type="text/html" title="SwiftUI布局基础" /><published>2021-02-26T00:00:00+08:00</published><updated>2021-02-26T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/26/iOS-swiftui-layout-base-rule</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/26/iOS-swiftui-layout-base-rule/">&lt;h1 id=&quot;布局基础规则&quot;&gt;布局基础规则&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;默认，SwiftUI允许每个视图根据其渲染的容器选择自己的大小，然后将其居中于其父对象中。&lt;/li&gt;
  &lt;li&gt;Modifier实际上是将调用的视图包装到了另外一个视图中&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yawei</name></author><category term="iOS" /><category term="Swift" /><summary type="html">布局基础规则</summary></entry><entry><title type="html">Combine详解（1）</title><link href="https://pfcstyle.github.io/2021/02/24/iOS-combine1/" rel="alternate" type="text/html" title="Combine详解（1）" /><published>2021-02-24T00:00:00+08:00</published><updated>2021-02-24T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/24/iOS-combine1</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/24/iOS-combine1/">&lt;h1 id=&quot;combine基础&quot;&gt;Combine基础&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Publisher是发布者，作为数据生产者，会定义一个Output和Failure类型。&lt;/li&gt;
  &lt;li&gt;Subscriber是订阅者，作为数据消费者，会定义一个Input合Failure类型。&lt;/li&gt;
  &lt;li&gt;Operator是操作者，可以更改Publisher Output类型，产生新的Publisher。&lt;/li&gt;
  &lt;li&gt;Publisher的Output类型和Subsciber的Input类型需要相同&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;订阅操作是通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publisher.subscribe(Subscriber)&lt;/code&gt;来完成的
获取到Subscribtion(Publisher.subscibe()返回)实例，可以调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cancel()&lt;/code&gt;取消&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sub?.cancel()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;内置subscriber&quot;&gt;内置Subscriber&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;sink(receiveCompletion:receiveValue:)&lt;/strong&gt;: 常用于publisher和sink一起执行的时候，比如request请求，返回的response会在sink中处理&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;assign(to:on:)&lt;/strong&gt;: 通过key path将收到的值赋值到model&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;// publisher之后直接sink
let sub = NotificationCenter.default
    .publisher(for: NSControl.textDidChangeNotification, object: filterField)
    .sink(receiveCompletion: { print ($0) },
          receiveValue: { print ($0) })

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;let sub = NotificationCenter.default
    .publisher(for: NSControl.textDidChangeNotification, object: filterField)
    .map( { ($0.object as! NSTextField).stringValue } )
    .assign(to: \MyViewModel.filterString, on: myViewModel)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;通过operator定制publisher&quot;&gt;通过operator定制publisher&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let sub = NotificationCenter.default
    .publisher(for: NSControl.textDidChangeNotification, object: filterField)
    .map( { ($0.object as! NSTextField).stringValue } )
    // 过滤非字母和数字字符
    .filter( { $0.unicodeScalars.allSatisfy({CharacterSet.alphanumerics.contains($0)}) } )
    // 防抖
    .debounce(for: .milliseconds(500), scheduler: RunLoop.main)
    // receive方法可以让combine在指定线程里调用subscriber
    .receive(on: RunLoop.main)
    .assign(to:\MyViewModel.filterString, on: myViewModel)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;share-operator&quot;&gt;share() operator&lt;/h1&gt;

&lt;p&gt;大多publishers都是struct, 是值类型，每一次订阅，实际上都是订阅了一个副本。share operator则可以赋予它们引用语义。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// PassthroughSubject是class类型，但是经过scan operator之后生成的是struct类型&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PassthroughSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 这里每次emit value, 第一个参数都会累加&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;publisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// subscribe一个&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c1:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// output&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 再次subscribe&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c2:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// output  可以发现，对两个subscriber来说，是两个struct, 上述的第一个参数会从0重新开始累加&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 如果加上share&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;publisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// output&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;connectable-publishers&quot;&gt;Connectable Publishers&lt;/h1&gt;

&lt;p&gt;有时会遇到如下图的问题，多个subscriber订阅同一个publisher，新的subscriber在订阅时，publisher可能已经emit一部分数据了。为了保证所有的subsciber都订阅以后publisher再开始执行，这就需要用到Connectable Publishers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../img/post/2021-02-24/connectable-publisher.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;想要生成Connectable Publishers，只需要让publisher执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;makeConnectable()&lt;/code&gt;operator即可，如下代码所示。当所有的subscriber都注册好之后，执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.connect&lt;/code&gt;函数即可让publisher开始执行&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let url = URL(string: &quot;https://example.com/&quot;)!
let connectable = URLSession.shared
    .dataTaskPublisher(for: url)
    .map() { $0.data }
    .catch() { _ in Just(Data() )}
    .share()
    .makeConnectable()

cancellable1 = connectable
    .sink(receiveCompletion: { print(&quot;Received completion 1: \($0).&quot;) },
          receiveValue: { print(&quot;Received data 1: \($0.count) bytes.&quot;) })

DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
    self.cancellable2 = connectable
        .sink(receiveCompletion: { print(&quot;Received completion 2: \($0).&quot;) },
              receiveValue: { print(&quot;Received data 2: \($0.count) bytes.&quot;) })
}

DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
    self.connection = connectable.connect()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外有一些内置的Connectable Publisher, 如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publishers.Multicast&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timer.TimerPublisher&lt;/code&gt;, 这些必须手动调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.connect()&lt;/code&gt;才可以执行，有时也会造成问题。这时，可以调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.autoconnect()&lt;/code&gt;, 那么subscriber可以立刻执行。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let cancellable = Timer.publish(every: 1, on: .main, in: .default)
    .autoconnect()
    .sink() { date in
        print (&quot;Date now: \(date)&quot;)
     }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;可以调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cancel()&lt;/code&gt;取消publisher&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;subscriber控制接收publisher-elements的数量&quot;&gt;Subscriber控制接收Publisher elements的数量&lt;/h1&gt;
&lt;p&gt;有两种方法&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;request(_:)&lt;/li&gt;
  &lt;li&gt;当publisher调用subscriber的receive(:)方法时返回一个新的demand&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常用的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sink&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assign&lt;/code&gt;默认是声明了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unlimited&lt;/code&gt;demand， 一旦声明了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unlimited&lt;/code&gt;就无法再更改了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;// Publisher: Uses a timer to emit the date once per second.
let timerPub = Timer.publish(every: 1, on: .main, in: .default)
    .autoconnect()

// Subscriber: Waits 5 seconds after subscription, then requests a
// maximum of 3 values.
class MySubscriber: Subscriber {
    typealias Input = Date
    typealias Failure = Never
    var subscription: Subscription?
    
    func receive(subscription: Subscription) {
        print(&quot;published                             received&quot;)
        self.subscription = subscription
        DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
            // request请求新的demand, 可以累加
            subscription.request(.max(3))
        }
    }
    
    func receive(_ input: Date) -&amp;gt; Subscribers.Demand {
        print(&quot;\(input)             \(Date())&quot;)
        // 直接返回新的Demand
        return Subscribers.Demand.none
    }
    
    func receive(completion: Subscribers.Completion&amp;lt;Never&amp;gt;) {
        print (&quot;--done--&quot;)
    }
}

// Subscribe to timerPub.
let mySub = MySubscriber()
print (&quot;Subscribing at \(Date())&quot;)
timerPub.subscribe(mySub)

// Output

Subscribing at 2019-12-09 18:57:06 +0000
published                             received
2019-12-09 18:57:11 +0000             2019-12-09 18:57:11 +0000
2019-12-09 18:57:12 +0000             2019-12-09 18:57:12 +0000
2019-12-09 18:57:13 +0000             2019-12-09 18:57:13 +0000
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;通过back-pressure反压-operator控制unlimited-demand&quot;&gt;通过Back-Pressure(反压) Operator控制Unlimited Demand&lt;/h2&gt;
&lt;p&gt;不自定义Subscriber也是可以控制需求的（作用到publisher上）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;buffer(size:prefetch:whenFull:)： 控制到一个固定数量，当数量满了之后，可以选择报错，丢弃等操作&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;debounce(for:scheduler:options:)： 防抖，当publisher停止publish达到某个时间后才会收到数据&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;throttle(for:scheduler:latest:)： 减流，会有一个最大产生数据的速率，如果收到太多，会只发送最新或最老的数据&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;collect(&lt;em&gt;:)和collect(&lt;/em&gt;:options:)： 将指定数量或时间的所有元素打包成一个数组一次性发送给订阅者&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yawei</name></author><category term="iOS" /><category term="Swift" /><category term="Combine" /><summary type="html">Combine基础</summary></entry><entry><title type="html">Communicating Clearly</title><link href="https://pfcstyle.github.io/2021/02/20/communicating-clearly/" rel="alternate" type="text/html" title="Communicating Clearly" /><published>2021-02-20T00:00:00+08:00</published><updated>2021-02-20T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/20/communicating-clearly</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/20/communicating-clearly/">&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;A po’boy
    &lt;ol&gt;
      &lt;li&gt;Let’s have a po’boy for launch!&lt;/li&gt;
      &lt;li&gt;A po’boy? Is that a kind of sandwich?&lt;/li&gt;
      &lt;li&gt;Yes, it’s a traditional submarine sandwich.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;key-grammar&quot;&gt;Key grammar&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;It’s a &lt;strong&gt;way of greeting&lt;/strong&gt; someone, commonly used in Japan.&lt;/li&gt;
  &lt;li&gt;It’s &lt;strong&gt;what&lt;/strong&gt; you need &lt;strong&gt;if&lt;/strong&gt; you want to travel to another country.&lt;/li&gt;
  &lt;li&gt;It’s &lt;strong&gt;kind of&lt;/strong&gt; a dog, but it’s a little bigger and lives in the wild.&lt;/li&gt;
  &lt;li&gt;It’s &lt;strong&gt;the way you feel&lt;/strong&gt; when you do something wrong and feel bad about it.&lt;/li&gt;
  &lt;li&gt;It’s &lt;strong&gt;where&lt;/strong&gt; you can go to play card games and win money.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dialogue&quot;&gt;Dialogue&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Frances: Yeah, I’m kind of nervous about my first day.&lt;/li&gt;
  &lt;li&gt;Do you have any idea what it will be like?&lt;/li&gt;
  &lt;li&gt;Martin: Well, because you’re an overseas student I’m not sure, but I think you’ll probably start off with a powhiri in the morning, and then youu can go for walk around campus after lunch.&lt;/li&gt;
  &lt;li&gt;Frances: Oh yeah, my agent told me about that, but &lt;strong&gt;what exactly&lt;/strong&gt; is a powhiri?&lt;/li&gt;
  &lt;li&gt;Martin: It’s a &lt;strong&gt;kind of&lt;/strong&gt; welcoming ceremony with speeches, dancing, singing, that kind of thing.&lt;/li&gt;
  &lt;li&gt;It can be a little intimidating at first, but just follow the instructions and I’m sure you’ll be fine.&lt;/li&gt;
  &lt;li&gt;Frances: And where will that be held?&lt;/li&gt;
  &lt;li&gt;Martin: Oh they always hold that at the marae.&lt;/li&gt;
  &lt;li&gt;Frances: The marae? &lt;strong&gt;Is that a kind of church&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;Martin: More of a town hall, I guess.&lt;/li&gt;
  &lt;li&gt;It’s where people go to perform ceremonies, have meetings, or even do some crafts or community activities.&lt;/li&gt;
  &lt;li&gt;Frances: Well, I’m looking forward to checking that out.&lt;/li&gt;
  &lt;li&gt;Martin: But, I would just say be careful about how you behave there.&lt;/li&gt;
  &lt;li&gt;In New Zealand we have this idea of mana- it’s kind of like a source of authority.&lt;/li&gt;
  &lt;li&gt;And that’s really important on the marae.&lt;/li&gt;
  &lt;li&gt;Frances: So &lt;strong&gt;it’s like&lt;/strong&gt; a law?&lt;/li&gt;
  &lt;li&gt;Martin: Hmm, &lt;strong&gt;not really&lt;/strong&gt;, it’s more spiritual.&lt;/li&gt;
  &lt;li&gt;It’s &lt;strong&gt;a way of showing&lt;/strong&gt; respect to a special person or place&lt;/li&gt;
  &lt;li&gt;Frances: So will I have to do anything special?&lt;/li&gt;
  &lt;li&gt;Martin: Oh, no, for the powhiri it’s just basic courtesy stuff really.&lt;/li&gt;
  &lt;li&gt;Turn your phone off, stay quiet while they’re giving the speeches, you know, don’t wander off, that kind of thing.&lt;/li&gt;
  &lt;li&gt;Frances: Well, my agent told me we’d have guides, so I guess I’ll just do what they say.&lt;/li&gt;
  &lt;li&gt;Martin: Yeah, don’t worry, I’m sure you’ll have a great time!&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yawei</name></author><category term="English" /><summary type="html">Example</summary></entry><entry><title type="html">Android平台JS引擎对比</title><link href="https://pfcstyle.github.io/2021/02/19/compare-v8-webview-duktape-android/" rel="alternate" type="text/html" title="Android平台JS引擎对比" /><published>2021-02-19T00:00:00+08:00</published><updated>2021-02-19T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/19/compare-v8-webview-duktape-android</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/19/compare-v8-webview-duktape-android/">&lt;p&gt;公司准备推出一个具备类似微信小程序的Mobile平台类APP, 经过调研，小程序架构都是渲染层与逻辑层分离的（小程序技术单开文章进行分析），而逻辑层其实就是一个JS引擎，那么JS引擎的选择就显得至关重要。因此，特别对目前Android平台上比较流行的JS引擎做一个对比。&lt;/p&gt;

&lt;h1 id=&quot;比较对象&quot;&gt;比较对象&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/evgenyneu/js-evaluator-for-android&quot;&gt;js-evaluator-for-android&lt;/a&gt;: 对native android webview的封装&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eclipsesource/J2V8&quot;&gt;J2V8&lt;/a&gt;: 对Google V8引擎做的java封装&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cashapp/duktape-android&quot;&gt;duktape-android&lt;/a&gt;:基于Duktape JS引擎做的封装&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;测试条目&quot;&gt;测试条目&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;初始化：循环初始化创建各个JS引擎，比较初始化效率&lt;/li&gt;
  &lt;li&gt;循环：循环执行字符串比较，对比执行效率&lt;/li&gt;
  &lt;li&gt;加载：加载一个大小为174k的json文件，比较加载效率&lt;/li&gt;
  &lt;li&gt;模型：执行一个复杂的计算模型，对比执行效率&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;坑点：js-evaluator-for-android是懒加载，在初始化时没有做任何事情，只有当执行js时才会真正初始化webview，而这也会导致后续所有的测试都不准确。因此，在初始化测试时，需要手动调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getWebViewWrapper&lt;/code&gt;并计入初始化时间；在进行其他测试时，也都需要手动调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getWebViewWrapper&lt;/code&gt;之后再开始执行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;完整测试代码在&lt;a href=&quot;https://github.com/pfcstyle/jsperformance&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;测试结果&quot;&gt;测试结果&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;../img/post/2021-02-19/compare-result.png&quot; alt=&quot;result&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;对比总结&quot;&gt;对比总结&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;优点&lt;/th&gt;
      &lt;th&gt;缺点&lt;/th&gt;
      &lt;th&gt;大小(默认全ABI)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Webview&lt;/td&gt;
      &lt;td&gt;没有依赖，不增加额外大小&lt;/td&gt;
      &lt;td&gt;效率低，不能执行大JS代码（大于1M）&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;J2V8&lt;/td&gt;
      &lt;td&gt;效率最高，使用方便&lt;/td&gt;
      &lt;td&gt;初始化较慢，对于apk大小增幅较大，目前仅有x64,x86,armv7和arm64v8类型ABI&lt;/td&gt;
      &lt;td&gt;92M&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Duktape&lt;/td&gt;
      &lt;td&gt;初始化快，体积小，具备全平台类型ABI&lt;/td&gt;
      &lt;td&gt;运行较J2V8慢&lt;/td&gt;
      &lt;td&gt;2.45M&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Yawei</name></author><category term="Android" /><summary type="html">公司准备推出一个具备类似微信小程序的Mobile平台类APP, 经过调研，小程序架构都是渲染层与逻辑层分离的（小程序技术单开文章进行分析），而逻辑层其实就是一个JS引擎，那么JS引擎的选择就显得至关重要。因此，特别对目前Android平台上比较流行的JS引擎做一个对比。</summary></entry><entry><title type="html">What I read</title><link href="https://pfcstyle.github.io/2021/02/19/what-i-read/" rel="alternate" type="text/html" title="What I read" /><published>2021-02-19T00:00:00+08:00</published><updated>2021-02-19T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/19/what-i-read</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/19/what-i-read/">&lt;h1 id=&quot;dialogue&quot;&gt;Dialogue&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Chen: Hey Harry, I was reading this book on English history that you told me about the other day and I was wondering-what legends are there in England?&lt;/li&gt;
  &lt;li&gt;Harry: Well, I can think of one really famous one.&lt;/li&gt;
  &lt;li&gt;There are many versions of this story and it’s set hundreds of years ago.&lt;/li&gt;
  &lt;li&gt;They’ve even made a few films about it.&lt;/li&gt;
  &lt;li&gt;Chen: Yeah? Okay, go for it.&lt;/li&gt;
  &lt;li&gt;Harry: So, &lt;strong&gt;there’s this&lt;/strong&gt; guy called Robin Hood.&lt;/li&gt;
  &lt;li&gt;He’s this amazing archer who lives in a place called Sherwood Forest.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Anyway&lt;/strong&gt;, the rightful king of England at the time, Richard, goes off to war, and the evil King John, rules England in his place.&lt;/li&gt;
  &lt;li&gt;He gets this other guy, the Sheriff of Nottingham to help him get more money from the poor.&lt;/li&gt;
  &lt;li&gt;The Sheriff is also a bad guy in the story and he raises taxes so that he can make as much money as possible from the poor people.&lt;/li&gt;
  &lt;li&gt;Chen: Ah, think I may have heard this story. Carry on.&lt;/li&gt;
  &lt;li&gt;Harry: &lt;strong&gt;Basically&lt;/strong&gt;, the poor people in the land find it difficult to survive as all their money’s been taken in the Sheriff’s taxes, you know?&lt;/li&gt;
  &lt;li&gt;So, &lt;strong&gt;one day&lt;/strong&gt; Robin thinks to himself “I need to do something here”, so, with a group of guys known as his Merry Men he starts to steal from the rich and give to the poor.&lt;/li&gt;
  &lt;li&gt;He sounds &lt;strong&gt;like&lt;/strong&gt; a bad guy, right?&lt;/li&gt;
  &lt;li&gt;Well &lt;strong&gt;it turns out&lt;/strong&gt; that he’s the hero of the story.&lt;/li&gt;
  &lt;li&gt;Chen: Okay, so what happens next?&lt;/li&gt;
  &lt;li&gt;Harry: &lt;strong&gt;To cut a long story short&lt;/strong&gt;, the Sheriff of Nottingham tries to catch Robin Hood and offers anyone who helps him a big reward&lt;/li&gt;
  &lt;li&gt;This Robin Hood guy, however, is too good for him and he ends up defeating the Sheriff and giving the poor back their money.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;In the end&lt;/strong&gt;, the rightful King, King Richard, returns to Sherwood Forest and peace and order are restored in the land.&lt;/li&gt;
  &lt;li&gt;You know Chen, I don’t think I know any legends in China, but I guess there must be loads…&lt;/li&gt;
  &lt;li&gt;Chen: Oh yeah. I can think of four in particular…&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yawei</name></author><category term="English" /><summary type="html">Dialogue</summary></entry><entry><title type="html">English in the modern world</title><link href="https://pfcstyle.github.io/2021/02/18/english-in-the-modern-world/" rel="alternate" type="text/html" title="English in the modern world" /><published>2021-02-18T00:00:00+08:00</published><updated>2021-02-18T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/18/english-in-the-modern-world</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/18/english-in-the-modern-world/">&lt;h1 id=&quot;key-vocabulary&quot;&gt;Key vocabulary&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Mother tongue&lt;/strong&gt;: A person’s first language.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bilingual&lt;/strong&gt;[ˌbaɪˈlɪŋɡwəl]: Able to speak two language.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lingua franca&lt;/strong&gt;: A common language used between people who don’t share the same first language&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Prestige dialect&lt;/strong&gt;: A variety of a language with high social status&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sociolinguistic&lt;/strong&gt;[ˌsoʊsioʊlɪŋˈɡwɪstɪk]: Referring to the relationship between society, social ideas and how languages are used.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Multilingual&lt;/strong&gt;[ˌmʌltiˈlɪŋɡwəl]: Able to speak many languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;article&quot;&gt;Article&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dean Harrison believes the old ways aren’t working anymore and calls for a new ‘world English’.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Imagine, for a moment, just a few of the cross-cultural conversations taking place across the globe right now. A Spanish architect steps off the plane in Berlin and greets his new coworkers from an international design firm. In Guangdong, China, a local export agent is on the phone discussing shipping options with an importer based in Greece. At a beach resort in Indonesia, a Russian tourist negotiates a taxi fare for her trip across the island.&lt;/p&gt;

&lt;p&gt;All these people share two things in common which will powerfully shape global communication in the years to come. Firstly, there’s a very good chance they are all speaking English. Secondly - and a far more significant development &lt;strong&gt;as far as&lt;/strong&gt; language learning is concerned - not a single person involved speaks English as their &lt;strong&gt;mother tongue&lt;/strong&gt;. It is now a global &lt;strong&gt;lingua franca&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It all used to be much simpler. English lessons would present a model of native English (typically a &lt;strong&gt;prestige dialect&lt;/strong&gt;, such as ‘BBC English’or’standard American’) and students would do their best to copy its pronunciation features, grammatical structures and so on. The best learners were those who most closely approximated the speech patterns of these dialects and their hearts would swell with pride anytime they heard the words, ‘Wow! You sound exactly like a native speaker!’&lt;/p&gt;

&lt;p&gt;But consider this simple fact illustrated by the examples above: most English communication around the world now occurs between non-native speakers. What importance does an American or British model have for conversations like these? ‘Sounding native’ is not the mark of success here. Rather, the ability to follow a variety of English dialects and make your meaning clear in a range of contexts is now what matters.&lt;/p&gt;

&lt;p&gt;Besides, non-native speakers now outnumber native speakers of English 4-to-1. &lt;strong&gt;In terms of&lt;/strong&gt; global communication, native speakers don’t’own’this language anymore and they can’t expect everyone else to &lt;strong&gt;follow their ways&lt;/strong&gt;. English learners should be free to develop their own style, mixing features of their first language with features of the new. After all, English now belongs to non-native speakers as much as it belongs to anyone else. Soon we will open up to the truly global and democratic English of the 21st century.&lt;/p&gt;</content><author><name>Yawei</name></author><category term="English" /><summary type="html">Key vocabulary</summary></entry><entry><title type="html">Attending a meeting</title><link href="https://pfcstyle.github.io/2021/02/17/attending-a-meeting/" rel="alternate" type="text/html" title="Attending a meeting" /><published>2021-02-17T00:00:00+08:00</published><updated>2021-02-17T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/17/attending-a-meeting</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/17/attending-a-meeting/">&lt;h1 id=&quot;key-language&quot;&gt;Key language&lt;/h1&gt;

&lt;h2 id=&quot;what-types-of-meetings-are-they&quot;&gt;What types of meetings are they?&lt;/h2&gt;
&lt;p&gt;1) share information, coordinate cross-department activities and projects, make announcements.(&lt;strong&gt;All-hands / staff meetings&lt;/strong&gt;)
 2) share problems, collect as many ideas as possible.(&lt;strong&gt;Brainstorming meetings&lt;/strong&gt;)
 3) assign tasks, decide methods, define results, solve problems.(&lt;strong&gt;Project meetings&lt;/strong&gt;)
 4) usually no more than 10 minutes, plan the day, prepare for daily tasks, align high-priority tasks for the day.(&lt;strong&gt;Stand-up meetings&lt;/strong&gt;)
 5) strengthen relationships, conduct group activities, develop trust amongst all employees.(&lt;strong&gt;Teambuilding meetings&lt;/strong&gt;)
 6) ensure all know what’s happening and who is responsible, share information, coordinate next steps.(&lt;strong&gt;Update meetings&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;## Are these good tips for effective meetings? All are good tips.
 1) Start and finish the meeting on time.
 2) Make sure the meeting is necessary.
 3) Make sure everyone participates in the meeting
 4) Have an agenda and stick to it.
 5) Plan ahead and prepare.&lt;/p&gt;

&lt;h1 id=&quot;dialogue&quot;&gt;Dialogue&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Tammy: Shall we start? Does everyone know why we’re having this meeting?&lt;/li&gt;
  &lt;li&gt;All employees: Umm, not really…&lt;/li&gt;
  &lt;li&gt;Tammy: Oh, ok, not to worry. It’ll be clearer soon enough.&lt;/li&gt;
  &lt;li&gt;There are a number of issues we need to talk about.&lt;/li&gt;
  &lt;li&gt;I’m sure everyone is aware that the marketing and sales teams will merge into one team soon.&lt;/li&gt;
  &lt;li&gt;So, the first item is, what can we do to maintain morale and ensure a smooth transition?&lt;/li&gt;
  &lt;li&gt;This is the biggest challenge we’re facing.&lt;/li&gt;
  &lt;li&gt;What are your thoughts?&lt;/li&gt;
  &lt;li&gt;David: Err… As an IT engineer, I’m not quite sure what I can do to help with this problem. Maybe Jane has some ideas?&lt;/li&gt;
  &lt;li&gt;Jane: Well, our sales team’s biggest concern is job cutting.&lt;/li&gt;
  &lt;li&gt;Tammy: About that, I’m afraid I can’t make any promises, and I don’t know what rumors have been going around, but there’s no plan for job cutting as far as I’m aware.&lt;/li&gt;
  &lt;li&gt;Dan: That’s good news for both teams. When will this happen?&lt;/li&gt;
  &lt;li&gt;Tammy: We’re aiming to complete the process by the end of next month, and will keep everyone informed.&lt;/li&gt;
  &lt;li&gt;Jane: I’m sorry to say that this timeline is a real challenge for us.&lt;/li&gt;
  &lt;li&gt;Dan: I’m with Jane on that. That’s a bit soon.&lt;/li&gt;
  &lt;li&gt;Tammy: I hear what you’re saying.&lt;/li&gt;
  &lt;li&gt;However, I’m afraid that’s no longer open for discussion.&lt;/li&gt;
  &lt;li&gt;The decision has been made by the board of directors.&lt;/li&gt;
  &lt;li&gt;Jane: What?! So we’ll just have to deal with it? Hmm, ok fine! Let’s talk about the next item then.&lt;/li&gt;
  &lt;li&gt;Tammy: Not yet, We still need to figure out how to make sure the transition goes smoothly…&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yawei</name></author><category term="English" /><summary type="html">Key language</summary></entry><entry><title type="html">Summarizing industry trends</title><link href="https://pfcstyle.github.io/2021/02/16/summarizing-industry-trends/" rel="alternate" type="text/html" title="Summarizing industry trends" /><published>2021-02-16T00:00:00+08:00</published><updated>2021-02-16T00:00:00+08:00</updated><id>https://pfcstyle.github.io/2021/02/16/summarizing-industry-trends</id><content type="html" xml:base="https://pfcstyle.github.io/2021/02/16/summarizing-industry-trends/">&lt;h1 id=&quot;key-vocabulary&quot;&gt;Key vocabulary&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Media companies are &lt;strong&gt;moving away from&lt;/strong&gt; newspapers and magazines, as not many people buy them anymore.&lt;/li&gt;
  &lt;li&gt;There used to be a lot of book shops around here, but they &lt;strong&gt;went out of business&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The first company to &lt;strong&gt;bring out&lt;/strong&gt; a self-driving car will really &lt;strong&gt;shake up&lt;/strong&gt; the automotive industry.&lt;/li&gt;
  &lt;li&gt;Younger travelers are getting bored with places like the Maldives or Bali. They’re starting to seek out new destinations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;dialogue&quot;&gt;Dialogue&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Jocelyn: Isaac, you were saying earlier that we’re about to deal with a different kind of client in this industry.&lt;/li&gt;
  &lt;li&gt;What exactly did you mean by that?&lt;/li&gt;
  &lt;li&gt;Isaac: &lt;strong&gt;What we’re seeing now is&lt;/strong&gt; that young professionals are coming in with the same questions, but they’ re looking for a different set of answers.&lt;/li&gt;
  &lt;li&gt;Normally, our older, traditional clients-they come in and ask what’s available and we reply, you know, stocks and bonds, funds, savings accounts at the bank.&lt;/li&gt;
  &lt;li&gt;Just different ways of making money.&lt;/li&gt;
  &lt;li&gt;But the younger ones, they want to do good things, they’re &lt;strong&gt;seeking out&lt;/strong&gt; ways to help the world.&lt;/li&gt;
  &lt;li&gt;So in the future &lt;strong&gt;we’ll no longer be&lt;/strong&gt; saying ‘stocks and bonds’, we’ll be saying ‘Look, if you’re worried about the environment, choose funds A or B, if you want to support the arts, go with X or Y.’&lt;/li&gt;
  &lt;li&gt;Bob: So, you’re saying that younger investors aren’t concerned about financial returns?&lt;/li&gt;
  &lt;li&gt;Isaac: Oh, don’t get me wrong.&lt;/li&gt;
  &lt;li&gt;Making money &lt;strong&gt;will continue to be&lt;/strong&gt; the main reason people come to us.&lt;/li&gt;
  &lt;li&gt;And that goes for young people too.&lt;/li&gt;
  &lt;li&gt;But it’s not just about meeting their family responsibilities anymore-there’s &lt;strong&gt;this shift toward&lt;/strong&gt; life experiences, making their dreams come true.&lt;/li&gt;
  &lt;li&gt;So, I think financial advisors &lt;strong&gt;will start to&lt;/strong&gt; bring out new kinds of advertising.&lt;/li&gt;
  &lt;li&gt;And we’ll be moving away from this image of the middle-aged guy and his family, and they’re all smiling, you know - ‘Oh, I’m sending my kids to college.’&lt;/li&gt;
  &lt;li&gt;It’ll be much more personal than that.&lt;/li&gt;
  &lt;li&gt;It’ll be about the year abroad in South America, or the vegetarian restaurant they always dreamed of opening.&lt;/li&gt;
  &lt;li&gt;And it’s gonna be our job to say ‘Yeah, we can make that happen.’&lt;/li&gt;
  &lt;li&gt;Jocelyn: Will this also affect how young people manage their finances?&lt;/li&gt;
  &lt;li&gt;Isaac: Absolutely. They’re going to shake up the way we do things in that area.&lt;/li&gt;
  &lt;li&gt;A 25-year-old doesn’t want a report coming in the mail twice a year.&lt;/li&gt;
  &lt;li&gt;They want to open their phone and check their finances at 2: 00am, and change their investment settings too if they feel like it.&lt;/li&gt;
  &lt;li&gt;And we can expect to see new apps that help them with this.&lt;/li&gt;
  &lt;li&gt;Over time, the companies that rely on the older methods will quite simply go out of business.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yawei</name></author><category term="English" /><summary type="html">Key vocabulary</summary></entry></feed>